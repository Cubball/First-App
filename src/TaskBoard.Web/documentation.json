{
    "pipes": [
        {
            "name": "EllipsisPipe",
            "id": "pipe-EllipsisPipe-7eb8a89c3d68f8df1641339b55836b875829fe2287db09198925c6fbacea423184ad3e2ad6223dd3b3557c792b5560bba97544501369ca1eec09348166d256f1",
            "file": "src/app/pipes/ellipsis.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxCharacters",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "100"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxCharacters",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "100",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "ellipsis",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'ellipsis',\r\n  standalone: true,\r\n})\r\nexport class EllipsisPipe implements PipeTransform {\r\n  transform(value: string, maxCharacters = 100): string {\r\n    const ellipsis = '...';\r\n    if (value.length <= maxCharacters) {\r\n      return value;\r\n    }\r\n\r\n    return `${value.substring(0, maxCharacters - ellipsis.length).trimEnd()}${ellipsis}`;\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "Board",
            "id": "interface-Board-84e280c12b9213e6984869e6f1007d201121ba46e8b75fadc06da0cdc3560a5e32013ebc687b878f2356894f267bd82569356d63c24f1981dc171ea538276e02",
            "file": "src/app/types/shared/board.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Board {\r\n  id: number;\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoardWithLists",
            "id": "interface-BoardWithLists-9531cbf37b1b42e89d97d08aa834ee90b64a99b05e3da14e5f33dda4332a1a792918a4d3e0a93962f5d56b21842adab4d5f1c3a929d6abce4e3270ce47271ce5",
            "file": "src/app/types/shared/board-with-lists.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ListWithCards } from './list-with-cards';\r\n\r\nexport interface BoardWithLists {\r\n  id: number;\r\n  name: string;\r\n  lists: ListWithCards[];\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListWithCards[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Card",
            "id": "interface-Card-872d6ae7133cbab5a9e8772f3a5bb4781b8b84cae0ad04671a2443a20fd7adfd6d6daee5b146d2186c746d030ab4739408498333d87e76bdf58419e2b082f5b6",
            "file": "src/app/types/shared/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Priority } from \"./priority\";\r\n\r\nexport interface Card {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  dueDate: string;\r\n  priority: Priority;\r\n  listId: number;\r\n  listName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "listName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Priority",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardChange",
            "id": "interface-CardChange-e32c27ca07a7b3c2b9d8c4059c77ad08f00c974f6c6910dfde78ae06f85085b266f70d82a788d73e30d09b8ff057d3ddce09cdb62c9082f68281dce8b2302a16",
            "file": "src/app/types/shared/card-change.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CardState } from './card-state';\r\n\r\nexport interface CardChange {\r\n  cardId: number;\r\n  updatedAt: string;\r\n  previousState?: CardState;\r\n  currentState?: CardState;\r\n}\r\n",
            "properties": [
                {
                    "name": "cardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "currentState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardState",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "previousState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardState",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardChangesList",
            "id": "interface-CardChangesList-13a27d1856f2647c6e2c03fc5c432cd72ca110435ef2ed8a412781d621359436ebb11f90ce32c3eb62653526756a27a19dcc6ef55c1cefb9da5ac8fcbe7d92dc",
            "file": "src/app/types/shared/card-changes-list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CardChange } from './card-change';\r\n\r\nexport interface CardChangesList {\r\n  totalItems: number;\r\n  pageSize: number;\r\n  pageNumber: number;\r\n  items: CardChange[];\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardChange[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "totalItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardCreated",
            "id": "interface-CardCreated-7a9d613202161cee6562e8afa830c8d9d1d7adeff5672b6086791454131ea400cc0c8c5838775da4f9a0912e81fd08131ab31655e949067d80cda8967ef81073",
            "file": "src/app/types/card-changes/card-created.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CardCreated {\r\n  changeType: 'CardCreated';\r\n  name: string;\r\n  listName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "changeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "listName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardDeleted",
            "id": "interface-CardDeleted-0dd1d706137165ef26788bcf4f91dbb493abadf8c9718c2224148d4d5cbca0ea2dfcfdd6b95bd0ad47d38439220603d73f69a39f7be959e4f018eb318ada490d",
            "file": "src/app/types/card-changes/card-deleted.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CardDeleted {\r\n  changeType: 'CardDeleted';\r\n  name: string;\r\n  listName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "changeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "listName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardInList",
            "id": "interface-CardInList-4125773d1f1782fdf08e3d4c7a1165fdd993d5de1f8ce74bac7c8cfcfffa568c780c22b008b215d84f5220e62fe724e86ad8f14062014eaefea7c1f605c8587a",
            "file": "src/app/types/shared/card-in-list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Priority } from './priority';\r\n\r\nexport interface CardInList {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  dueDate: string;\r\n  priority: Priority;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Priority",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardMoved",
            "id": "interface-CardMoved-8210431f7bfbaee3dcb6aa62b040a199a49a4e299e2ff9e11287502da61c661818a7763da4a5be1d18693cc766a3555caefa73fbc650617be0aae5a3bbd16df8",
            "file": "src/app/types/card-changes/card-moved.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CardMoved {\r\n  changeType: 'CardMoved';\r\n  name?: string;\r\n  from: string;\r\n  to: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "changeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardRenamed",
            "id": "interface-CardRenamed-d18c5c136229f94cf70fd83511203e0243ee6dfab5efa9fc2e3bac037b406d0ab2a5833e4074f7edd88d67b9e5559b822bc03ef026b8a5152395c15399a17f25",
            "file": "src/app/types/card-changes/card-renamed.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CardRenamed {\r\n  changeType: 'CardRenamed';\r\n  from: string;\r\n  to: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "changeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardState",
            "id": "interface-CardState-699b2dee96415df4667896626b01f7549f40825303e4369ef232b6e4cb395c745333f02c14b91515c82dd25b20f0521624c7dec517b6db400da30b33b238c2ba",
            "file": "src/app/types/shared/card-state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Priority } from './priority';\r\n\r\nexport interface CardState {\r\n  name: string;\r\n  description: string;\r\n  dueDate: string;\r\n  priority: Priority;\r\n  listId: number;\r\n  listName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "listName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Priority",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardUpdated",
            "id": "interface-CardUpdated-15b58681d04d6dcd4887c46ba04d45ad9ced767a1db60637e13a6c525fdd2ecdd55722b00d2e45a6ef3881204820573912eabf5b47c5fe9549670078412c6743",
            "file": "src/app/types/card-changes/card-updated.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CardUpdated {\r\n  changeType: 'CardUpdated';\r\n  fieldName: string;\r\n  name?: string;\r\n  from?: string;\r\n  to?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "changeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "fieldName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateBoard",
            "id": "interface-CreateBoard-af8f1e8e0a742fe4765227b00f966e7170cd4e3b26e0c561f360d72e87ebd0da9f6bcf96e2e33080c6d06f7e920008fa3fcfefe6e95bd096567b487ee5f10271",
            "file": "src/app/types/requests/create-board.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateBoard {\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateCard",
            "id": "interface-CreateCard-fa76737b23f03fb4f6db3112ad53a1bff45277830333a6c8dd0e889b01cf9c27dc0fe962f13e72914daedf6cad94a04fc47ffd0bf4512a2d69c76fd2b062447a",
            "file": "src/app/types/requests/create-card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Priority } from \"../shared/priority\";\r\n\r\nexport interface CreateCard {\r\n  name: string;\r\n  description: string;\r\n  dueDate: string;\r\n  priority: Priority;\r\n  listId: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Priority",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateList",
            "id": "interface-CreateList-20e00b7b55f7c7e8efe4675aab5afd8ff4971e894355fa36ac30e5089eda8c9a9205862ca34326dd3164a455557885afce38d0315dc423c9c632bef498aa4369",
            "file": "src/app/types/requests/create-list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateList {\r\n  name: string;\r\n  boardId: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FormattedCardChange",
            "id": "interface-FormattedCardChange-66795463ae8da44cc28af954592005702b69d6f74dab47ff8ec9ebec87b4a089b2e71cb33fca712a2752c62562ee72f4e41a7d7ec49f8148d6d657a9ae8f1c14",
            "file": "src/app/types/card-changes/formatted-card-change.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormattedCardChangeItem } from './formatted-card-change-item';\r\n\r\nexport interface FormattedCardChange {\r\n  updatedAt: Date;\r\n  changes: FormattedCardChangeItem[];\r\n}\r\n",
            "properties": [
                {
                    "name": "changes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormattedCardChangeItem[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "List",
            "id": "interface-List-21bebb3fcc38dc5ea76f5a2ca5e377f01667bc94f161dce97f4e6c4b5f2f08dd68f850b975dee80617bdd8b39fcab2d93498e9884d6e456d72f54e7456cde69a",
            "file": "src/app/types/shared/list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface List {\r\n  id: number;\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ListWithCards",
            "id": "interface-ListWithCards-0e796d31b51c39383d68b634f5b0117d6b4fc47461f286af477323e72d70c3607b31cae0b0a4a8468bf23348197ea0f9971e2ebb3cec9a05e839e53eeb5b39f2",
            "file": "src/app/types/shared/list-with-cards.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CardInList } from './card-in-list';\r\n\r\nexport interface ListWithCards {\r\n  id: number;\r\n  name: string;\r\n  cards: CardInList[];\r\n}\r\n",
            "properties": [
                {
                    "name": "cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardInList[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ToastNotification",
            "id": "interface-ToastNotification-20d81a1016b8cc4b3927fa9aa2bf7b1dc7a7c61a8d3a7837624c8ddf5a678b38b17b33f99d55302df7bd57edfc53893dc6815ffcfd9b891b72bc37e89ab793cf",
            "file": "src/app/types/toast/toast-notification.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ToastNotificationType } from \"./toast-notification-type\";\r\n\r\nexport interface ToastNotification {\r\n  type: ToastNotificationType;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastNotificationType",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateBoard",
            "id": "interface-UpdateBoard-af13af58c90ac768db1cd9d1475e8756520cce834296dffd35a5b66a7152034adb4fc8b5112e6e33d8beec9b328fb02cc85ddad93863e9e274eaba2719cc6c65",
            "file": "src/app/types/requests/update-board.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UpdateBoard {\r\n  id: number;\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateCard",
            "id": "interface-UpdateCard-d5d4bd11b4beb32e9d6fe69b26ec18a3e0019fa2ec27860d88d7397c4527e642151ca30fd758bff317de1cabab1fe22d524df4ec6dfc156e02e82de41d4d1aba",
            "file": "src/app/types/requests/update-card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Priority } from \"../shared/priority\";\r\n\r\nexport interface UpdateCard {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  dueDate: string;\r\n  priority: Priority;\r\n  listId: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Priority",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateList",
            "id": "interface-UpdateList-839cce1aa617a6bf9685b76e8e50fcd2d8841147f549e830803af442db64ba33fb2e3840f9b7ff96e905fb514256b9574019eb82a70795d591df5308fe520332",
            "file": "src/app/types/requests/update-list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UpdateList {\r\n  id: number;\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "BoardService",
            "id": "injectable-BoardService-b56406c20b695b978c500be1cec423f550d6528b60a7bc3745e266e3babfbd009aade464a017dcd2bab89b5482e4a30e845f1e53fd356bdb4f66452aaf55fe5e",
            "file": "src/app/services/board.service.ts",
            "properties": [
                {
                    "name": "boardsEndpoint",
                    "defaultValue": "`${environment.apiBaseUrl}/boards`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "CreateBoard",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Board>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "CreateBoard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllBoards",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Board[]>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBoardWithLists",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BoardWithLists>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "UpdateBoard",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "UpdateBoard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BoardWithLists } from '../types/shared/board-with-lists';\r\nimport { Observable, map } from 'rxjs';\r\nimport { Board } from '../types/shared/board';\r\nimport { CreateBoard } from '../types/requests/create-board';\r\nimport { UpdateBoard } from '../types/requests/update-board';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BoardService {\r\n  private readonly boardsEndpoint = `${environment.apiBaseUrl}/boards`;\r\n\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  getBoardWithLists(id: number): Observable<BoardWithLists> {\r\n    return this.httpClient.get<BoardWithLists>(`${this.boardsEndpoint}/${id}`);\r\n  }\r\n\r\n  getAllBoards(): Observable<Board[]> {\r\n    return this.httpClient\r\n      .get<{ boards: Board[] }>(this.boardsEndpoint)\r\n      .pipe(map(({ boards }) => boards));\r\n  }\r\n\r\n  addBoard(board: CreateBoard): Observable<Board> {\r\n    return this.httpClient.post<Board>(this.boardsEndpoint, board);\r\n  }\r\n\r\n  updateBoard(board: UpdateBoard): Observable<void> {\r\n    return this.httpClient.put<void>(`${this.boardsEndpoint}/${board.id}`, board);\r\n  }\r\n\r\n  deleteBoard(id: number): Observable<void> {\r\n    return this.httpClient.delete<void>(`${this.boardsEndpoint}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CardChangesFormatterService",
            "id": "injectable-CardChangesFormatterService-b116a2c1cf0a4f897bedee45d2d75b74a216a37a85953de60776e6e91c86050eb86e64044c57b648e62a1d9b617e1ce5ba14ad3257a92e2732ca31ce1364812a",
            "file": "src/app/services/card-changes-formatter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getFieldChanges",
                    "args": [
                        {
                            "name": "cardChange",
                            "type": "CardChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "cardChange",
                            "type": "CardChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormattedChange",
                    "args": [
                        {
                            "name": "cardChange",
                            "type": "CardChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormattedCardChange",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardChange",
                            "type": "CardChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormattedChanges",
                    "args": [
                        {
                            "name": "cardChange",
                            "type": "CardChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormattedCardChangeItem[]",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "cardChange",
                            "type": "CardChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CardChange } from '../types/shared/card-change';\r\nimport { FormattedCardChangeItem } from '../types/card-changes/formatted-card-change-item';\r\nimport { FormattedCardChange } from '../types/card-changes/formatted-card-change';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CardChangesFormatterService {\r\n  getFormattedChange(cardChange: CardChange): FormattedCardChange {\r\n    const changes = this.getFormattedChanges(cardChange);\r\n    return {\r\n      updatedAt: new Date(cardChange.updatedAt),\r\n      changes,\r\n    };\r\n  }\r\n\r\n  private getFormattedChanges(\r\n    cardChange: CardChange,\r\n  ): FormattedCardChangeItem[] {\r\n    if (!cardChange.currentState) {\r\n      return [\r\n        {\r\n          changeType: 'CardDeleted',\r\n          name: cardChange.previousState!.name,\r\n          listName: cardChange.previousState!.listName,\r\n        },\r\n      ];\r\n    }\r\n\r\n    if (!cardChange.previousState) {\r\n      return [\r\n        {\r\n          changeType: 'CardCreated',\r\n          name: cardChange.currentState.name,\r\n          listName: cardChange.currentState.listName,\r\n        },\r\n      ];\r\n    }\r\n\r\n    return this.getFieldChanges(cardChange);\r\n  }\r\n\r\n  private getFieldChanges(cardChange: CardChange) {\r\n    const changes: FormattedCardChangeItem[] = [];\r\n    if (!cardChange.previousState || !cardChange.currentState) {\r\n      return changes;\r\n    }\r\n\r\n    if (cardChange.currentState.name !== cardChange.previousState.name) {\r\n      changes.push({\r\n        changeType: 'CardRenamed',\r\n        from: cardChange.previousState.name,\r\n        to: cardChange.currentState.name,\r\n      });\r\n    }\r\n\r\n    if (cardChange.currentState.listId !== cardChange.previousState.listId) {\r\n      changes.push({\r\n        changeType: 'CardMoved',\r\n        name: changes.length === 0 ? cardChange.currentState.name : undefined,\r\n        from: cardChange.previousState.listName,\r\n        to: cardChange.currentState.listName,\r\n      });\r\n    }\r\n\r\n    if (\r\n      cardChange.currentState.priority !== cardChange.previousState.priority\r\n    ) {\r\n      changes.push({\r\n        changeType: 'CardUpdated',\r\n        name: changes.length === 0 ? cardChange.currentState.name : undefined,\r\n        fieldName: 'priority',\r\n        from: cardChange.previousState.priority,\r\n        to: cardChange.currentState.priority,\r\n      });\r\n    }\r\n\r\n    if (\r\n      cardChange.currentState.description !==\r\n      cardChange.previousState.description\r\n    ) {\r\n      changes.push({\r\n        changeType: 'CardUpdated',\r\n        name: changes.length === 0 ? cardChange.currentState.name : undefined,\r\n        fieldName: 'description',\r\n      });\r\n    }\r\n\r\n    if (cardChange.currentState.dueDate !== cardChange.previousState.dueDate) {\r\n      changes.push({\r\n        changeType: 'CardUpdated',\r\n        name: changes.length === 0 ? cardChange.currentState.name : undefined,\r\n        fieldName: 'due date',\r\n      });\r\n    }\r\n\r\n    return changes;\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CardService",
            "id": "injectable-CardService-f67fee4e81a930710ac294a80ee4c0ad4ab2cfef848bf9ddd99125986ab88653971d467c1b2bdb3195962b1a1b4b11261c37cff407f9d20a172e0ceb51c4933d",
            "file": "src/app/services/card.service.ts",
            "properties": [
                {
                    "name": "cardsEndpoint",
                    "defaultValue": "`${environment.apiBaseUrl}/cards`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "CreateCard",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Card>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "CreateCard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCard",
                    "args": [
                        {
                            "name": "cardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCardById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Card>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "UpdateCard",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "UpdateCard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { Card } from '../types/shared/card';\r\nimport { CreateCard } from '../types/requests/create-card';\r\nimport { UpdateCard } from '../types/requests/update-card';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CardService {\r\n  private readonly cardsEndpoint = `${environment.apiBaseUrl}/cards`;\r\n\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  getCardById(id: number): Observable<Card> {\r\n    return this.httpClient.get<Card>(`${this.cardsEndpoint}/${id}`);\r\n  }\r\n\r\n  addCard(card: CreateCard): Observable<Card> {\r\n    return this.httpClient.post<Card>(this.cardsEndpoint, card);\r\n  }\r\n\r\n  updateCard(card: UpdateCard): Observable<void> {\r\n    return this.httpClient.put<void>(`${this.cardsEndpoint}/${card.id}`, card);\r\n  }\r\n\r\n  deleteCard(cardId: number): Observable<void> {\r\n    return this.httpClient.delete<void>(`${this.cardsEndpoint}/${cardId}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "HistoryService",
            "id": "injectable-HistoryService-ff1ffcd1f86f86b613f76ed0089264d81fe7f0146759fe0fe824765fd020f2e56610f0cd3cecc1df59964b6e24e07d592991131627f35369987e2a91ad094d8e",
            "file": "src/app/services/history.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllChanges",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CardChangesList>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllChangesForCard",
                    "args": [
                        {
                            "name": "cardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CardChange[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment';\r\nimport { CardChange } from '../types/shared/card-change';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, map } from 'rxjs';\r\nimport { CardChangesList } from '../types/shared/card-changes-list';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HistoryService {\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n  ) {}\r\n\r\n  getAllChangesForCard(cardId: number): Observable<CardChange[]> {\r\n    return this.httpClient\r\n      .get<{\r\n        changes: CardChange[];\r\n      }>(`${environment.apiBaseUrl}/cards/${cardId}/history`)\r\n      .pipe(map((response) => response.changes));\r\n  }\r\n\r\n  getAllChanges(boardId: number, page: number, pageSize: number): Observable<CardChangesList> {\r\n    return this.httpClient.get<CardChangesList>(\r\n      `${environment.apiBaseUrl}/boards/${boardId}/history`,\r\n      {\r\n        params: new HttpParams().appendAll({\r\n          page,\r\n          pageSize,\r\n        }),\r\n      },\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ListService",
            "id": "injectable-ListService-0564b531cd686af7c675390a08f9bd115f7631331a7affdd5d67dba7f231478b17c5b958038ee88b194af39b650dc206fe572052254104618fc1f387f0ff4d3b",
            "file": "src/app/services/list.service.ts",
            "properties": [
                {
                    "name": "listsEndpoint",
                    "defaultValue": "`${environment.apiBaseUrl}/lists`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addList",
                    "args": [
                        {
                            "name": "list",
                            "type": "CreateList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<List>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "CreateList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteList",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllLists",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<List[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateList",
                    "args": [
                        {
                            "name": "list",
                            "type": "UpdateList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "UpdateList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment';\r\nimport { Observable, map } from 'rxjs';\r\nimport { List } from '../types/shared/list';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UpdateList } from '../types/requests/update-list';\r\nimport { CreateList } from '../types/requests/create-list';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ListService {\r\n  private readonly listsEndpoint = `${environment.apiBaseUrl}/lists`;\r\n\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  getAllLists(boardId: number): Observable<List[]> {\r\n    return this.httpClient\r\n      .get<{\r\n        lists: List[];\r\n      }>(`${environment.apiBaseUrl}/boards/${boardId}/lists`)\r\n      .pipe(map((response) => response.lists));\r\n  }\r\n\r\n  addList(list: CreateList): Observable<List> {\r\n    return this.httpClient.post<List>(this.listsEndpoint, list);\r\n  }\r\n\r\n  updateList(list: UpdateList): Observable<void> {\r\n    return this.httpClient.put<void>(`${this.listsEndpoint}/${list.id}`, list);\r\n  }\r\n\r\n  deleteList(id: number): Observable<void> {\r\n    return this.httpClient.delete<void>(`${this.listsEndpoint}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ToastService",
            "id": "injectable-ToastService-a14d9041b8b5d9467d9b0a22e1f721a5b1c4cb1bd8fd81a54f562ac64511a7a1fda61e320c90066169794376bdaa51a5b1fb100cd20f34c2e27e5b4482b4b115",
            "file": "src/app/services/toast.service.ts",
            "properties": [
                {
                    "name": "toasts",
                    "defaultValue": "this.toastsArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReadonlyArray<ToastNotification>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "toastsArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastNotification[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addToast",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "ToastNotificationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "durationInMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "3000"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "ToastNotificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "durationInMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "3000",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeToast",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ToastNotification } from '../types/toast/toast-notification';\r\nimport { ToastNotificationType } from '../types/toast/toast-notification-type';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ToastService {\r\n  private readonly toastsArray: ToastNotification[] = [];\r\n\r\n  readonly toasts: ReadonlyArray<ToastNotification> = this.toastsArray;\r\n\r\n  addToast(message: string, type: ToastNotificationType, durationInMs = 3000) {\r\n    this.toastsArray.push({\r\n      message,\r\n      type,\r\n    });\r\n    setTimeout(() => this.toastsArray.shift(), durationInMs);\r\n  }\r\n\r\n  removeToast(index: number) {\r\n    this.toastsArray.splice(index, 1);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AddEditBoardComponent",
            "id": "component-AddEditBoardComponent-9e38571ecd30c3e497822eff4174c11cede694e5fa535f0a4d9a00d3e3b680e68f13575bc9584c12fbd8c47de084a599ba326884cb865ebd2b672aa6b641911e",
            "file": "src/app/components/pages/add-edit-board/add-edit-board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-edit-board",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-edit-board.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "inputControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "addBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormButtonComponent } from '../../shared/form-button/form-button.component';\r\nimport { Store } from '@ngrx/store';\r\nimport { boardActions } from '../../../store/boards/actions';\r\nimport { currentBoardActions } from '../../../store/current-board/actions';\r\nimport { selectCurrentBoardState } from '../../../store/current-board/reducers';\r\n\r\n@Component({\r\n  selector: 'app-add-edit-board',\r\n  standalone: true,\r\n  imports: [FormButtonComponent, ReactiveFormsModule],\r\n  templateUrl: './add-edit-board.component.html',\r\n  host: {\r\n    class: 'flex justify-center',\r\n  },\r\n})\r\nexport class AddEditBoardComponent {\r\n  boardId?: number;\r\n\r\n  inputControl = new FormControl('');\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private activatedRoute: ActivatedRoute,\r\n    private location: Location,\r\n  ) {\r\n    this.boardId = Number(this.activatedRoute.snapshot.params['boardId']);\r\n    if (this.boardId) {\r\n      this.store.dispatch(currentBoardActions.load({ id: this.boardId }));\r\n      this.store.select(selectCurrentBoardState).subscribe((board) => {\r\n        this.inputControl.setValue(board.name);\r\n      });\r\n    }\r\n  }\r\n\r\n  onSaveClick() {\r\n    if (this.boardId) {\r\n      this.updateBoard();\r\n    } else {\r\n      this.addBoard();\r\n    }\r\n  }\r\n\r\n  onCancelClick() {\r\n    this.location.back();\r\n  }\r\n\r\n  private addBoard() {\r\n    this.store.dispatch(\r\n      boardActions.add({ board: { name: this.inputControl.value ?? '' } }),\r\n    );\r\n  }\r\n\r\n  private updateBoard() {\r\n    this.store.dispatch(\r\n      boardActions.update({\r\n        board: { id: this.boardId!, name: this.inputControl.value ?? '' },\r\n      }),\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex max-w-md grow flex-col gap-3\">\r\n  <input\r\n    type=\"text\"\r\n    minlength=\"2\"\r\n    maxlength=\"100\"\r\n    placeholder=\"Enter board name...\"\r\n    class=\"rounded-md border border-gray-400 bg-gray-100 p-2\"\r\n    [formControl]=\"inputControl\"\r\n  />\r\n  <div class=\"flex justify-between gap-2\">\r\n    <app-form-button\r\n      [text]=\"boardId ? 'Save board' : 'Add board'\"\r\n      class=\"grow\"\r\n      [style]=\"'Primary'\"\r\n      (buttonClick)=\"onSaveClick()\"\r\n    >\r\n    </app-form-button>\r\n    <app-form-button\r\n      text=\"Cancel\"\r\n      class=\"grow\"\r\n      [style]=\"'Secondary'\"\r\n      (buttonClick)=\"onCancelClick()\"\r\n    >\r\n    </app-form-button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AddEditCardComponent",
            "id": "component-AddEditCardComponent-d6688d9704c127bcb9cd2deee010e3f006db1af1aa44047ddff543dbd388e028fde7a1325d8c75274abd3b13baffbf8f5ae2132aa2559abb27a1f7ad75b6f0a2",
            "file": "src/app/components/pages/board-page/add-edit-card/add-edit-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-edit-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-edit-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allowedPriorities",
                    "defaultValue": "ALLOWED_PRIORITIES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "cardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "faCalendar",
                    "defaultValue": "faCalendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "faListUl",
                    "defaultValue": "faListUl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "faTag",
                    "defaultValue": "faTag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "faXmark",
                    "defaultValue": "faXmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\r\n    name: new FormControl('', [\r\n      Validators.minLength(2),\r\n      Validators.maxLength(100),\r\n      Validators.required,\r\n    ]),\r\n    description: new FormControl(''),\r\n    dueDate: new FormControl<string>(''),\r\n    priority: new FormControl<Priority | null>(null),\r\n    listId: new FormControl(0),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "lists$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<List[]>",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "addCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "CreateCard",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "CreateCard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCreateCardFromFormGroup",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CreateCard",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormGroupFromCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocalDateStringFromUTCDateString",
                    "args": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUpdateCardFromFormGroup",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UpdateCard",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUTCDateFromLocalDateString",
                    "args": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "listTrackBy",
                    "args": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "type": "List",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "List",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCancelClick",
                    "args": [
                        {
                            "name": "closeButton",
                            "type": "HTMLButtonElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "closeButton",
                            "type": "HTMLButtonElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSaveClick",
                    "args": [
                        {
                            "name": "closeButton",
                            "type": "HTMLButtonElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "closeButton",
                            "type": "HTMLButtonElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "UpdateCard",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "UpdateCard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "FormButtonComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { ModalComponent } from '../../../shared/modal/modal.component';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport {\r\n  ALLOWED_PRIORITIES,\r\n  Priority,\r\n} from '../../../../types/shared/priority';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport {\r\n  faCalendar,\r\n  faListUl,\r\n  faTag,\r\n  faXmark,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Observable } from 'rxjs';\r\nimport { List } from '../../../../types/shared/list';\r\nimport { FormButtonComponent } from '../../../shared/form-button/form-button.component';\r\nimport { ToastService } from '../../../../services/toast.service';\r\nimport { Card } from '../../../../types/shared/card';\r\nimport { CreateCard } from '../../../../types/requests/create-card';\r\nimport { UpdateCard } from '../../../../types/requests/update-card';\r\nimport { Store } from '@ngrx/store';\r\nimport { cardActions } from '../../../../store/card/actions';\r\nimport { selectCardState } from '../../../../store/card/reducers';\r\nimport { selectLists } from '../../../../store/current-board/reducers';\r\n\r\n@Component({\r\n  selector: 'app-add-edit-card',\r\n  standalone: true,\r\n  imports: [\r\n    ModalComponent,\r\n    FormButtonComponent,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FontAwesomeModule,\r\n  ],\r\n  templateUrl: './add-edit-card.component.html',\r\n})\r\nexport class AddEditCardComponent {\r\n  private cardId: number;\r\n\r\n  faXmark = faXmark;\r\n  faCalendar = faCalendar;\r\n  faTag = faTag;\r\n  faListUl = faListUl;\r\n\r\n  allowedPriorities = ALLOWED_PRIORITIES;\r\n  lists$: Observable<List[]>;\r\n  formGroup = new FormGroup({\r\n    name: new FormControl('', [\r\n      Validators.minLength(2),\r\n      Validators.maxLength(100),\r\n      Validators.required,\r\n    ]),\r\n    description: new FormControl(''),\r\n    dueDate: new FormControl<string>(''),\r\n    priority: new FormControl<Priority | null>(null),\r\n    listId: new FormControl(0),\r\n  });\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private toastService: ToastService,\r\n    private activatedRoute: ActivatedRoute,\r\n  ) {\r\n    this.cardId = Number(this.activatedRoute.snapshot.params['id']);\r\n    this.lists$ = this.store.select(selectLists);\r\n    this.initializeForm();\r\n  }\r\n\r\n  listTrackBy(_: number, list: List) {\r\n    return list.id;\r\n  }\r\n\r\n  onCancelClick(closeButton: HTMLButtonElement) {\r\n    closeButton.click();\r\n  }\r\n\r\n  onSaveClick(closeButton: HTMLButtonElement) {\r\n    if (!this.formGroup.valid) {\r\n      this.toastService.addToast('Please fill out all of the fields', 'Error');\r\n      return;\r\n    }\r\n\r\n    if (this.cardId) {\r\n      const card = this.getUpdateCardFromFormGroup(this.formGroup);\r\n      this.updateCard(card);\r\n    } else {\r\n      const card = this.getCreateCardFromFormGroup(this.formGroup);\r\n      this.addCard(card);\r\n    }\r\n\r\n    closeButton.click();\r\n  }\r\n\r\n  private initializeForm() {\r\n    if (this.cardId) {\r\n      this.store.dispatch(cardActions.load({ id: this.cardId }));\r\n      this.store.select(selectCardState).subscribe((card) => {\r\n        this.formGroup = this.getFormGroupFromCard(card);\r\n      });\r\n    } else {\r\n      this.formGroup.controls.listId.setValue(\r\n        this.activatedRoute.snapshot.params['listId'],\r\n      );\r\n    }\r\n  }\r\n\r\n  private getUTCDateFromLocalDateString(dateString: string): Date {\r\n    const offset = new Date().getTimezoneOffset();\r\n    const date = new Date(dateString);\r\n    date.setMinutes(date.getMinutes() + offset);\r\n    return date;\r\n  }\r\n\r\n  private getLocalDateStringFromUTCDateString(dateString: string): string {\r\n    const offset = new Date().getTimezoneOffset();\r\n    const date = new Date(dateString);\r\n    date.setMinutes(date.getMinutes() - offset);\r\n    return date.toISOString().split('T')[0];\r\n  }\r\n\r\n  private getFormGroupFromCard(card: Card): FormGroup {\r\n    return new FormGroup({\r\n      name: new FormControl(card.name),\r\n      description: new FormControl(card.description),\r\n      dueDate: new FormControl(\r\n        this.getLocalDateStringFromUTCDateString(card.dueDate),\r\n      ),\r\n      priority: new FormControl(card.priority),\r\n      listId: new FormControl(card.listId),\r\n    });\r\n  }\r\n\r\n  private getCreateCardFromFormGroup(formGroup: FormGroup): CreateCard {\r\n    return {\r\n      name: formGroup.value.name!,\r\n      description: formGroup.value.description!,\r\n      priority: formGroup.value.priority!,\r\n      listId: Number(formGroup.value.listId!),\r\n      dueDate: this.getUTCDateFromLocalDateString(\r\n        formGroup.value.dueDate!,\r\n      ).toISOString(),\r\n    };\r\n  }\r\n\r\n  private getUpdateCardFromFormGroup(formGroup: FormGroup): UpdateCard {\r\n    return {\r\n      ...this.getCreateCardFromFormGroup(formGroup),\r\n      id: this.cardId,\r\n    };\r\n  }\r\n\r\n  private addCard(card: CreateCard): void {\r\n    this.store.dispatch(cardActions.add({ card }));\r\n  }\r\n\r\n  private updateCard(card: UpdateCard) {\r\n    this.store.dispatch(cardActions.update({ card }));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<app-modal extraClasses=\"flex justify-center items-center\">\r\n  <main\r\n    class=\"max-h-fit w-fit overflow-hidden rounded-xl bg-white text-gray-900\"\r\n  >\r\n    <div class=\"bg-gray-500 text-right\">\r\n      <form method=\"dialog\">\r\n        <button class=\"px-5 py-2\" #closeButton>\r\n          <fa-icon [icon]=\"faXmark\" class=\"text-xl text-white\"></fa-icon>\r\n        </button>\r\n      </form>\r\n    </div>\r\n    <div class=\"p-5\">\r\n      <form [formGroup]=\"formGroup\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter card name...\"\r\n          class=\"w-full text-xl font-bold md:text-2xl\"\r\n          formControlName=\"name\"\r\n          required\r\n          minlength=\"2\"\r\n          maxlength=\"100\"\r\n        />\r\n        <ul class=\"py-2 text-xs *:py-1 md:text-sm md:*:py-2\">\r\n          <li>\r\n            <label\r\n              for=\"listId\"\r\n              class=\"inline-block w-1/3 max-w-32 text-gray-500\"\r\n            >\r\n              <fa-icon [icon]=\"faListUl\" class=\"mr-1\"></fa-icon>\r\n              List\r\n            </label>\r\n            <select\r\n              id=\"listId\"\r\n              formControlName=\"listId\"\r\n              class=\"rounded-md border border-gray-300 bg-gray-100 px-1 py-0.5 outline outline-white\"\r\n              required\r\n            >\r\n              <option\r\n                *ngFor=\"let list of lists$ | async; trackBy: listTrackBy\"\r\n                [value]=\"list.id\"\r\n              >\r\n                {{ list.name }}\r\n              </option>\r\n            </select>\r\n          </li>\r\n          <li>\r\n            <label\r\n              for=\"dueDate\"\r\n              class=\"inline-block w-1/3 max-w-32 text-gray-500\"\r\n            >\r\n              <fa-icon [icon]=\"faCalendar\" class=\"mr-1\"></fa-icon>\r\n              Due date\r\n            </label>\r\n            <input\r\n              formControlName=\"dueDate\"\r\n              id=\"dueDate\"\r\n              type=\"date\"\r\n              class=\"rounded-md border border-gray-300 bg-gray-100 px-1 py-0.5\"\r\n              required\r\n            />\r\n          </li>\r\n          <li>\r\n            <label\r\n              for=\"priority\"\r\n              class=\"inline-block w-1/3 max-w-32 text-gray-500\"\r\n            >\r\n              <fa-icon [icon]=\"faTag\" class=\"mr-1\"></fa-icon>\r\n              Priority\r\n            </label>\r\n            <select\r\n              id=\"priority\"\r\n              formControlName=\"priority\"\r\n              class=\"rounded-md border border-gray-300 bg-gray-100 px-1 py-0.5 outline outline-white\"\r\n              required\r\n            >\r\n              <option [value]=\"null\" disabled selected hidden>\r\n                Select the priority\r\n              </option>\r\n              <option\r\n                *ngFor=\"let priorityValue of allowedPriorities\"\r\n                [value]=\"priorityValue\"\r\n              >\r\n                {{ priorityValue }}\r\n              </option>\r\n            </select>\r\n          </li>\r\n        </ul>\r\n        <h3 class=\"py-1.5 text-lg font-bold md:py-3 md:text-xl\">Description</h3>\r\n        <textarea\r\n          formControlName=\"description\"\r\n          placeholder=\"Write some information...\"\r\n          class=\"w-full rounded-md border border-gray-300 p-2 text-xs md:text-sm\"\r\n        ></textarea>\r\n        <div class=\"wrap flex gap-1 pt-1 *:grow md:pt-2\">\r\n          <app-form-button\r\n            text=\"Save\"\r\n            [style]=\"'Primary'\"\r\n            (buttonClick)=\"onSaveClick(closeButton)\"\r\n          >\r\n          </app-form-button>\r\n          <app-form-button\r\n            text=\"Cancel\"\r\n            (buttonClick)=\"onCancelClick(closeButton)\"\r\n          ></app-form-button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </main>\r\n</app-modal>\r\n"
        },
        {
            "name": "AddNewListComponent",
            "id": "component-AddNewListComponent-e559d1478cda75e8dc6389e99471b521a575f8ab00a5e7a49a50d8555251e98787da1cf28d4b3b8008bbf67c85c471193c1fe5e2a2d4acb4893d74951a345fea",
            "file": "src/app/components/pages/board-page/add-new-list/add-new-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-new-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-new-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addListPopupOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "inputControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "addList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onAddNewListClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveNewListClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormButtonComponent } from '../../../shared/form-button/form-button.component';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { listActions } from '../../../../store/lists/actions';\r\n\r\n@Component({\r\n  selector: 'app-add-new-list',\r\n  standalone: true,\r\n  imports: [FormButtonComponent, FontAwesomeModule, ReactiveFormsModule],\r\n  templateUrl: './add-new-list.component.html',\r\n})\r\nexport class AddNewListComponent {\r\n  private boardId!: number;\r\n\r\n  faPlus = faPlus;\r\n\r\n  addListPopupOpen = false;\r\n  inputControl = new FormControl('');\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private activatedRoute: ActivatedRoute,\r\n  ) {\r\n    this.activatedRoute.params.subscribe(\r\n      (params) => (this.boardId = params['boardId']),\r\n    );\r\n  }\r\n\r\n  onAddNewListClick(): void {\r\n    this.inputControl.setValue('');\r\n    this.addListPopupOpen = true;\r\n  }\r\n\r\n  onCancelClick(): void {\r\n    this.addListPopupOpen = false;\r\n  }\r\n\r\n  onSaveNewListClick(): void {\r\n    this.addList();\r\n    this.addListPopupOpen = false;\r\n  }\r\n\r\n  private addList() {\r\n    this.store.dispatch(\r\n      listActions.add({\r\n        list: {\r\n          name: this.inputControl.value ?? '',\r\n          boardId: this.boardId,\r\n        },\r\n      }),\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex flex-col gap-3\">\r\n  @if (!addListPopupOpen) {\r\n    <h2\r\n      class=\"flex items-center justify-between border-b border-t border-gray-300 py-2 font-medium\"\r\n    >\r\n      <span>Add another list</span>\r\n      <span>\r\n        <button (click)=\"onAddNewListClick()\">\r\n          <fa-icon [icon]=\"faPlus\" class=\"mx-3\"></fa-icon>\r\n        </button>\r\n      </span>\r\n    </h2>\r\n  } @else {\r\n    <input\r\n      type=\"text\"\r\n      minlength=\"2\"\r\n      maxlength=\"100\"\r\n      placeholder=\"Enter list title...\"\r\n      class=\"rounded-md border border-gray-400 bg-gray-100 p-2\"\r\n      [formControl]=\"inputControl\"\r\n    />\r\n    <div class=\"flex justify-between gap-2\">\r\n      <app-form-button\r\n        text=\"Add list\"\r\n        class=\"grow\"\r\n        [style]=\"'Primary'\"\r\n        (buttonClick)=\"onSaveNewListClick()\"\r\n      >\r\n      </app-form-button>\r\n      <app-form-button\r\n        text=\"Cancel\"\r\n        class=\"grow\"\r\n        [style]=\"'Secondary'\"\r\n        (buttonClick)=\"onCancelClick()\"\r\n      >\r\n      </app-form-button>\r\n    </div>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-5e33573c51bb9e8b99ad6d59a5e14d0715541e20cb89472f2b4eb11f493fc087eb215581f21bda7deb61626b0cfbe4424c699bcc3bb3782e5737287d3144efc0",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "ToastNotificationsComponent",
                    "type": "component"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ToastNotificationsComponent } from './components/toast-notifications/toast-notifications.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [\r\n    HeaderComponent,\r\n    ToastNotificationsComponent,\r\n    RouterOutlet,\r\n    CommonModule,\r\n  ],\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"flex max-h-screen flex-col overflow-y-hidden p-5 text-gray-900\">\r\n  <app-header></app-header>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n<div class=\"absolute bottom-0 right-0 z-50 overflow-hidden\">\r\n  <app-toast-notifications></app-toast-notifications>\r\n</div>\r\n"
        },
        {
            "name": "CardChangeComponent",
            "id": "component-CardChangeComponent-5cc0c9a9de98f693009892daf04669a1ce132b253802a6123c9e2ff06d08b3c6e41662cd3a203d9dc5984665f23d0c66e121e6ee489c745ce393e2cdfc255e67",
            "file": "src/app/components/shared/card-change/card-change.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-change",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card-change.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cardChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FormattedCardChange",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CardNameComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { FormattedCardChange } from '../../../types/card-changes/formatted-card-change';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CardNameComponent } from './card-name/card-name.component';\r\n\r\n@Component({\r\n  selector: 'app-card-change',\r\n  standalone: true,\r\n  imports: [CommonModule, CardNameComponent],\r\n  templateUrl: './card-change.component.html',\r\n})\r\nexport class CardChangeComponent {\r\n  @Input() cardChange!: FormattedCardChange;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<article\r\n  class=\"flex py-4 text-sm text-gray-500\"\r\n  *ngIf=\"cardChange.changes.length > 0\"\r\n>\r\n  <p class=\"mr-2\">&bullet;</p>\r\n  <div class=\"grow\">\r\n    <p>\r\n      <span>You</span>\r\n      @for (\r\n        cardChangeItem of cardChange.changes;\r\n        track cardChangeItem.changeType;\r\n        let i = $index\r\n      ) {\r\n        @switch (cardChangeItem.changeType) {\r\n          @case (\"CardRenamed\") {\r\n            <span>\r\n              renamed\r\n              <app-card-name [text]=\"cardChangeItem.from\"></app-card-name>\r\n              to\r\n              <app-card-name [text]=\"cardChangeItem.to\"></app-card-name\r\n            ></span>\r\n          }\r\n          @case (\"CardCreated\") {\r\n            <span>\r\n              added\r\n              <app-card-name [text]=\"cardChangeItem.name\"></app-card-name>\r\n              to\r\n              <span class=\"font-medium\">{{\r\n                cardChangeItem.listName\r\n              }}</span></span\r\n            >\r\n          }\r\n          @case (\"CardDeleted\") {\r\n            <span>\r\n              deleted\r\n              <app-card-name [text]=\"cardChangeItem.name\"></app-card-name>\r\n              from\r\n              <span class=\"font-medium\">{{\r\n                cardChangeItem.listName\r\n              }}</span></span\r\n            >\r\n          }\r\n          @case (\"CardMoved\") {\r\n            <span>\r\n              moved\r\n              @if (cardChangeItem.name) {\r\n                <app-card-name [text]=\"cardChangeItem.name\"></app-card-name>\r\n              } @else {\r\n                it\r\n              }\r\n              from <span class=\"font-medium\">{{ cardChangeItem.from }}</span> to\r\n              <span class=\"font-medium\">{{ cardChangeItem.to }}</span></span\r\n            >\r\n          }\r\n          @case (\"CardUpdated\") {\r\n            <span>\r\n              changed\r\n              @if (cardChangeItem.name) {\r\n                the {{ cardChangeItem.fieldName }} of\r\n                <app-card-name [text]=\"cardChangeItem.name\"></app-card-name>\r\n              } @else {\r\n                it's {{ cardChangeItem.fieldName }}\r\n              }\r\n            </span>\r\n            @if (cardChangeItem.from) {\r\n              <span>\r\n                from\r\n                <span class=\"font-medium\">{{ cardChangeItem.from }}</span> to\r\n                <span class=\"font-medium\">{{ cardChangeItem.to }}</span></span\r\n              >\r\n            }\r\n          }\r\n        }\r\n        @if (i < cardChange.changes.length - 2) {\r\n          <span>,</span>\r\n        } @else if (i === cardChange.changes.length - 2) {\r\n          and\r\n        }\r\n      }\r\n    </p>\r\n    <p class=\"mt-1 italic\">\r\n      {{ cardChange.updatedAt | date: \"MMM d 'at' hh:mm a\" }}\r\n    </p>\r\n  </div>\r\n</article>\r\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-334d8a67ebe1b819112e293f190143b60b2867cf01f2d9b0422f29eb6d9dc9151dd35a38be4fe62e680c70f7aaf6d3a31bdae698648fb9cd18ee94f9db4d54af",
            "file": "src/app/components/pages/board-page/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "CardInList",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableLists$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<List[]>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "faArrowRight",
                    "defaultValue": "faArrowRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "faCalendar",
                    "defaultValue": "faCalendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "faChevronDown",
                    "defaultValue": "faChevronDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "faEllipsisVertical",
                    "defaultValue": "faEllipsisVertical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "getPriorityiClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "\"bg-gray-100 text-gray-500\" | \"bg-gray-200 text-gray-600\" | \"bg-gray-300 text-gray-800\"",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listTrackBy",
                    "args": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "type": "List",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "List",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMoveToClick",
                    "args": [
                        {
                            "name": "selectedId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "EditDeleteMenuComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "EllipsisPipe",
                    "type": "pipe"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CardInList } from '../../../../types/shared/card-in-list';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport {\r\n  faEllipsisVertical,\r\n  faChevronDown,\r\n  faArrowRight,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { faCalendar } from '@fortawesome/free-regular-svg-icons';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EditDeleteMenuComponent } from '../../../shared/edit-delete-menu/edit-delete-menu.component';\r\nimport { List } from '../../../../types/shared/list';\r\nimport { Observable } from 'rxjs';\r\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\r\nimport { EllipsisPipe } from '../../../../pipes/ellipsis.pipe';\r\nimport { Store } from '@ngrx/store';\r\nimport { cardActions } from '../../../../store/card/actions';\r\nimport { selectLists } from '../../../../store/current-board/reducers';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  standalone: true,\r\n  imports: [\r\n    EditDeleteMenuComponent,\r\n    RouterLink,\r\n    EllipsisPipe,\r\n    FontAwesomeModule,\r\n    CommonModule,\r\n  ],\r\n  templateUrl: './card.component.html',\r\n})\r\nexport class CardComponent {\r\n  faEllipsisVertical = faEllipsisVertical;\r\n  faCalendar = faCalendar;\r\n  faChevronDown = faChevronDown;\r\n  faArrowRight = faArrowRight;\r\n\r\n  @Input() card!: CardInList;\r\n  availableLists$: Observable<List[]>;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n  ) {\r\n    this.availableLists$ = this.store.select(selectLists);\r\n  }\r\n\r\n  onMoveToClick(selectedId: number): void {\r\n    this.store.dispatch(\r\n      cardActions.update({\r\n        card: {\r\n          ...this.card,\r\n          listId: selectedId,\r\n        },\r\n      }),\r\n    );\r\n  }\r\n\r\n  onEditClick(): void {\r\n    this.router.navigate(['cards', this.card.id, 'edit'], {\r\n      relativeTo: this.activatedRoute,\r\n    });\r\n  }\r\n\r\n  onDeleteClick(): void {\r\n    this.store.dispatch(cardActions.delete({ id: this.card.id }))\r\n  }\r\n\r\n  getPriorityiClasses() {\r\n    switch (this.card.priority) {\r\n      case 'Low':\r\n        return 'bg-gray-100 text-gray-500';\r\n      case 'Medium':\r\n        return 'bg-gray-200 text-gray-600';\r\n      case 'High':\r\n        return 'bg-gray-300 text-gray-800';\r\n    }\r\n  }\r\n\r\n  listTrackBy(_: number, list: List) {\r\n    return list.id;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<article class=\"flex flex-col gap-2 rounded-md border border-gray-300 p-3\">\r\n  <h3 class=\"relative flex justify-between font-medium\">\r\n    <button routerLink=\"cards/{{ card.id }}\">{{ card.name }}</button>\r\n    <button class=\"peer\">\r\n      <fa-icon [icon]=\"faEllipsisVertical\" class=\"mx-3\"></fa-icon>\r\n    </button>\r\n    <app-edit-delete-menu\r\n      class=\"absolute right-0 top-8 z-10 hidden active:block peer-focus:block\"\r\n      (editClick)=\"onEditClick()\"\r\n      (deleteClick)=\"onDeleteClick()\"\r\n    ></app-edit-delete-menu>\r\n  </h3>\r\n  <p class=\"text-sm text-gray-500\">{{ card.description | ellipsis }}</p>\r\n  <p>\r\n    <fa-icon [icon]=\"faCalendar\" class=\"mr-2\"></fa-icon>\r\n    <span class=\"text-sm text-gray-500\">{{\r\n      card.dueDate | date: \"ccc, d MMM\"\r\n    }}</span>\r\n  </p>\r\n  <p\r\n    class=\"w-fit rounded-full px-2.5 pb-0.5 text-sm\"\r\n    [ngClass]=\"getPriorityiClasses()\"\r\n  >\r\n    &bullet; {{ card.priority }}\r\n  </p>\r\n  <div class=\"relative text-sm font-medium\">\r\n    <button\r\n      class=\"peer flex w-full justify-between rounded-md bg-gray-300 px-3 py-1.5\"\r\n    >\r\n      <span>Move to:</span>\r\n      <fa-icon [icon]=\"faChevronDown\"></fa-icon>\r\n    </button>\r\n    <div\r\n      class=\"absolute z-10 hidden w-full translate-y-1 rounded-md border border-gray-300 bg-white active:block peer-focus:block\"\r\n    >\r\n      <button\r\n        *ngFor=\"let list of availableLists$ | async; trackBy: listTrackBy\"\r\n        class=\"block w-full px-3 py-1.5 text-left hover:bg-gray-100\"\r\n        (click)=\"onMoveToClick(list.id)\"\r\n      >\r\n        <fa-icon [icon]=\"faArrowRight\" class=\"mr-1.5 text-xs\"></fa-icon\r\n        >{{ list.name }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</article>\r\n"
        },
        {
            "name": "CardDetailsComponent",
            "id": "component-CardDetailsComponent-cf79a270bd0eb9767161b4de8d8224dbff09ca5fb041c466c23009e36e147695052d10981eb4ef0dcf93e1863b261bc04df6f02dd26a3056b7a4c6abd8b773db",
            "file": "src/app/components/pages/board-page/card-details/card-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-details",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card-details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "cardChangesFormatter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardChangesFormatterService",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "changes$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CardChange[]>",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "faArrowRight",
                    "defaultValue": "faArrowRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "faCalendar",
                    "defaultValue": "faCalendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "faChevronDown",
                    "defaultValue": "faChevronDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "faListUl",
                    "defaultValue": "faListUl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "faPenToSquare",
                    "defaultValue": "faPenToSquare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "faTag",
                    "defaultValue": "faTag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "faXmark",
                    "defaultValue": "faXmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "lists$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<List[]>",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTrackBy",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_",
                            "type": "CardChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_",
                            "type": "CardChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listTrackBy",
                    "args": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "type": "List",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "List",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMoveToSelect",
                    "args": [
                        {
                            "name": "listId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "listId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "CardChangeComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ModalComponent } from '../../../shared/modal/modal.component';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport {\r\n  faXmark,\r\n  faListUl,\r\n  faChevronDown,\r\n  faArrowRight,\r\n  faTag,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { faPenToSquare, faCalendar } from '@fortawesome/free-regular-svg-icons';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { Card } from '../../../../types/shared/card';\r\nimport { Observable } from 'rxjs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { List } from '../../../../types/shared/list';\r\nimport { CardChange } from '../../../../types/shared/card-change';\r\nimport { CardChangeComponent } from '../../../shared/card-change/card-change.component';\r\nimport { CardChangesFormatterService } from '../../../../services/card-changes-formatter.service';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectCardState } from '../../../../store/card/reducers';\r\nimport { cardActions } from '../../../../store/card/actions';\r\nimport { selectLists } from '../../../../store/current-board/reducers';\r\nimport { cardChangesActions } from '../../../../store/card-changes/actions';\r\nimport { selectCardChangesState } from '../../../../store/card-changes/reducers';\r\n\r\n@Component({\r\n  selector: 'app-card-details',\r\n  standalone: true,\r\n  imports: [\r\n    ModalComponent,\r\n    CardChangeComponent,\r\n    RouterLink,\r\n    FontAwesomeModule,\r\n    CommonModule,\r\n  ],\r\n  templateUrl: './card-details.component.html',\r\n})\r\nexport class CardDetailsComponent {\r\n  faXmark = faXmark;\r\n  faPenToSquare = faPenToSquare;\r\n  faListUl = faListUl;\r\n  faChevronDown = faChevronDown;\r\n  faArrowRight = faArrowRight;\r\n  faCalendar = faCalendar;\r\n  faTag = faTag;\r\n\r\n  card?: Card;\r\n  changes$: Observable<CardChange[]>;\r\n  lists$: Observable<List[]>;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    public cardChangesFormatter: CardChangesFormatterService,\r\n    private activatedRoute: ActivatedRoute,\r\n  ) {\r\n    const cardId = Number(this.activatedRoute.snapshot.params['id']);\r\n    this.store.dispatch(cardActions.load({ id: cardId }));\r\n    this.store.dispatch(cardChangesActions.load({ cardId }));\r\n    this.changes$ = this.store.select(selectCardChangesState)\r\n    this.lists$ = this.store.select(selectLists);\r\n    this.store.select(selectCardState).subscribe((card) => (this.card = card));\r\n  }\r\n\r\n  listTrackBy(_: number, list: List) {\r\n    return list.id;\r\n  }\r\n\r\n  changeTrackBy(index: number, _: CardChange) {\r\n    return index;\r\n  }\r\n\r\n  onMoveToSelect(listId: string) {\r\n    if (!this.card) {\r\n      return;\r\n    }\r\n\r\n    this.store.dispatch(\r\n      cardActions.update({\r\n        card: {\r\n          ...this.card,\r\n          listId: Number(listId),\r\n        },\r\n      }),\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardChangesFormatter",
                        "type": "CardChangesFormatterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardChangesFormatter",
                        "type": "CardChangesFormatterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<app-modal extraClasses=\"flex justify-center items-center\">\r\n  <main\r\n    class=\"flex h-[80vh] max-h-[800px] w-[80vw] max-w-[1000px] flex-col overflow-hidden rounded-xl bg-white text-gray-900\"\r\n  >\r\n    <div class=\"bg-gray-500 text-right\">\r\n      <form method=\"dialog\">\r\n        <button class=\"px-5 py-2\">\r\n          <fa-icon [icon]=\"faXmark\" class=\"text-xl text-white\"></fa-icon>\r\n        </button>\r\n      </form>\r\n    </div>\r\n    <div\r\n      class=\"flex grow flex-wrap overflow-y-auto\"\r\n      style=\"scrollbar-width: none\"\r\n    >\r\n      <article class=\"min-w-64 grow basis-[60%] p-5\">\r\n        <div *ngIf=\"card\">\r\n          <h2 class=\"flex items-center justify-between\">\r\n            <span class=\"text-xl font-bold md:text-2xl\">\r\n              {{ card.name }}\r\n            </span>\r\n            <button\r\n              routerLink=\"../../cards/{{ card.id }}/edit\"\r\n              class=\"rounded-md border border-gray-300 px-1.5 py-0.5 text-xs md:px-3 md:py-1 md:text-sm\"\r\n            >\r\n              <fa-icon [icon]=\"faPenToSquare\"></fa-icon>\r\n              Edit\r\n            </button>\r\n          </h2>\r\n          <ul class=\"py-2 text-xs *:py-1 md:text-sm md:*:py-2\">\r\n            <li>\r\n              <span class=\"inline-block w-1/3 max-w-32 text-gray-500\">\r\n                <fa-icon [icon]=\"faListUl\" class=\"mr-1\"></fa-icon>\r\n                List\r\n              </span>\r\n              <select\r\n                class=\"rounded-md border border-gray-300 bg-gray-100 py-0.5 pl-1 pr-2 outline outline-white\"\r\n                (change)=\"onMoveToSelect(select.value)\"\r\n                #select\r\n              >\r\n                <option\r\n                  *ngFor=\"let list of lists$ | async; trackBy: listTrackBy\"\r\n                  [value]=\"list.id\"\r\n                  [selected]=\"list.id === card.listId\"\r\n                >\r\n                  {{ list.name }}\r\n                </option>\r\n              </select>\r\n            </li>\r\n            <li>\r\n              <span class=\"inline-block w-1/3 max-w-32 text-gray-500\">\r\n                <fa-icon [icon]=\"faCalendar\" class=\"mr-1\"></fa-icon>\r\n                Due date </span\r\n              ><span class=\"inline-block\">\r\n                {{ card.dueDate | date: \"ccc, d MMMM\" }}\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span class=\"inline-block w-1/3 max-w-32 text-gray-500\">\r\n                <fa-icon [icon]=\"faTag\" class=\"mr-1\"></fa-icon>\r\n                Priority </span\r\n              ><span class=\"inline-block\">{{ card.priority }}</span>\r\n            </li>\r\n          </ul>\r\n          <h3 class=\"py-1.5 text-lg font-bold md:py-3 md:text-xl\">\r\n            Description\r\n          </h3>\r\n          <p class=\"text-xs text-gray-500 md:text-sm\">\r\n            {{ card.description }}\r\n          </p>\r\n        </div>\r\n      </article>\r\n      <aside class=\"grow basis-[40%] bg-gray-100 p-5\">\r\n        <h2 class=\"pt-1 text-lg font-bold md:text-xl\">Activity</h2>\r\n        <app-card-change\r\n          *ngFor=\"let cardChange of changes$ | async; trackBy: changeTrackBy\"\r\n          [cardChange]=\"cardChangesFormatter.getFormattedChange(cardChange)\"\r\n        >\r\n        </app-card-change>\r\n      </aside>\r\n    </div>\r\n  </main>\r\n</app-modal>\r\n"
        },
        {
            "name": "CardNameComponent",
            "id": "component-CardNameComponent-a34a37c065fea476971aacc44e893f8151ce6e0928e3c9e0b76da64a7af5b8bd327b2551321c5a00d4582e5ab854c007ded57b8bca2445cf3b6072da98d85504",
            "file": "src/app/components/shared/card-change/card-name/card-name.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-name",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card-name.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faCircleDot",
                    "defaultValue": "faCircleDot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faCircleDot } from '@fortawesome/free-regular-svg-icons';\r\n\r\n@Component({\r\n  selector: 'app-card-name',\r\n  standalone: true,\r\n  imports: [FontAwesomeModule],\r\n  templateUrl: './card-name.component.html',\r\n})\r\nexport class CardNameComponent {\r\n  faCircleDot = faCircleDot;\r\n  @Input() text!: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span class=\"font-medium text-gray-900\"\r\n  ><fa-icon [icon]=\"faCircleDot\" class=\"text-xs\"></fa-icon> {{ text }}</span\r\n>\r\n"
        },
        {
            "name": "EditDeleteMenuComponent",
            "id": "component-EditDeleteMenuComponent-02caf48ab85617e76577e0f73f8d5da47c70d06aaba5019d5519768a971b3605c791817b6871d646298a9d1566405d1c2ff5680f2ac16c862a2e42d4c8262dff",
            "file": "src/app/components/shared/edit-delete-menu/edit-delete-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-delete-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./edit-delete-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "deleteClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "editClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faPenToSquare",
                    "defaultValue": "faPenToSquare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "faTrashCan",
                    "defaultValue": "faTrashCan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "onDeleteClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faPenToSquare } from '@fortawesome/free-regular-svg-icons';\r\nimport { faTrashCan } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n  selector: 'app-edit-delete-menu',\r\n  standalone: true,\r\n  imports: [FontAwesomeModule],\r\n  templateUrl: './edit-delete-menu.component.html',\r\n})\r\nexport class EditDeleteMenuComponent {\r\n  faPenToSquare = faPenToSquare;\r\n  faTrashCan = faTrashCan;\r\n\r\n  @Output() editClick = new EventEmitter<void>();\r\n  @Output() deleteClick = new EventEmitter<void>();\r\n\r\n  onEditClick() {\r\n    this.editClick.emit();\r\n  }\r\n\r\n  onDeleteClick() {\r\n    this.deleteClick.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div\r\n  class=\"w-fit rounded-md border border-gray-300 bg-white\"\r\n>\r\n  <button\r\n    class=\"block w-full px-3 py-1.5 text-left hover:bg-gray-100\"\r\n    (click)=\"onEditClick()\"\r\n  >\r\n    <fa-icon [icon]=\"faPenToSquare\" class=\"mr-1\"></fa-icon>\r\n    Edit\r\n  </button>\r\n  <button\r\n    class=\"block w-full px-3 py-1.5 text-left text-red-500 hover:bg-gray-100\"\r\n    (click)=\"onDeleteClick()\"\r\n  >\r\n    <fa-icon [icon]=\"faTrashCan\" class=\"mr-1\"></fa-icon>\r\n    Delete\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "FormButtonComponent",
            "id": "component-FormButtonComponent-1944ccae61c7973ec807e569a28ad531e3a484dff0fed88ca33020093fdc4f6fae21a48aaa85dadda0f5b0b0b04f052eeea3d46591b9a1f042f169998d627e7f",
            "file": "src/app/components/shared/form-button/form-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./form-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "\"Primary\" | \"Secondary\"",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-form-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './form-button.component.html',\r\n})\r\nexport class FormButtonComponent {\r\n  @Input() style!: \"Primary\" | \"Secondary\";\r\n  @Input() text!: string;\r\n  @Output() buttonClick = new EventEmitter<void>();\r\n\r\n  onClick(): void {\r\n    this.buttonClick.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button\r\n  class=\"w-full rounded-md p-2\"\r\n  [ngClass]=\"\r\n    style === 'Primary' ? 'bg-gray-500 text-white' : 'border border-gray-300'\r\n  \"\r\n  (click)=\"onClick()\"\r\n>\r\n  {{ text }}\r\n</button>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-05279e932b0ac0fe3617bcaa0aebec45a827983db73779616e57632661cdba1d00350f30f658fb73b41c7330d644d69ee4eba87928ffe5504f6e46969419d397",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boards$",
                    "defaultValue": "this.store.select(selectBoardsState)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "faChevronDown",
                    "defaultValue": "faChevronDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "boardTrackBy",
                    "args": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { faChevronDown, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { RouterLink } from '@angular/router';\r\nimport { Board } from '../../types/shared/board';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectBoardsState } from '../../store/boards/reducers';\r\nimport { boardActions } from '../../store/boards/actions';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  standalone: true,\r\n  imports: [RouterLink, FontAwesomeModule, CommonModule],\r\n  templateUrl: './header.component.html',\r\n})\r\nexport class HeaderComponent {\r\n  faPlus = faPlus;\r\n  faChevronDown = faChevronDown;\r\n\r\n  boards$ = this.store.select(selectBoardsState);\r\n\r\n  constructor(private store: Store) {\r\n    this.store.dispatch(boardActions.loadAll())\r\n  }\r\n\r\n  boardTrackBy(_: number, board: Board) {\r\n    return board.id;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<header class=\"flex justify-between pb-3\">\r\n  <h1 class=\"text-2xl font-bold md:text-4xl\">\r\n    <button class=\"peer\">\r\n      Boards\r\n      <fa-icon [icon]=\"faChevronDown\" class=\"ml-1\"></fa-icon>\r\n    </button>\r\n    <div\r\n      class=\"absolute z-10 hidden w-fit translate-y-1 overflow-hidden rounded-md border border-gray-300 bg-white text-lg active:block peer-focus:block\"\r\n    >\r\n      <button\r\n        *ngFor=\"let board of boards$ | async; trackBy: boardTrackBy\"\r\n        class=\"block w-full px-3 py-1.5 text-left hover:bg-gray-100\"\r\n        routerLink=\"/boards/{{ board.id }}\"\r\n      >\r\n        {{ board.name }}\r\n      </button>\r\n    </div>\r\n  </h1>\r\n  <button\r\n    class=\"text-md h-fit rounded-md border border-gray-300 px-2 py-1 font-medium md:px-4 md:py-2 md:text-xl\"\r\n    routerLink=\"/boards/new\"\r\n  >\r\n    <fa-icon [icon]=\"faPlus\" class=\"mr-1\"></fa-icon>\r\n    Add new board\r\n  </button>\r\n</header>\r\n"
        },
        {
            "name": "HistorySidebarComponent",
            "id": "component-HistorySidebarComponent-d4eae8484d0d08f0a487c5f54ba09793bd2bf2f463a3c86e90eeb0e56281c78d98d2888d2920b4944accee2028c62a89e0caa23a42db1c870daf4649f9a45aa5",
            "file": "src/app/components/pages/board-page/history-sidebar/history-sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-history-sidebar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./history-sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cardChangesFormatter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardChangesFormatterService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "changes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardChangesList",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "faArrowRotateLeft",
                    "defaultValue": "faArrowRotateLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "faXmark",
                    "defaultValue": "faXmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTrackBy",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_",
                            "type": "CardChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_",
                            "type": "CardChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMoreChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasMore",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "CardChangeComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ModalComponent } from '../../../shared/modal/modal.component';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faXmark, faArrowRotateLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { CardChange } from '../../../../types/shared/card-change';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CardChangeComponent } from '../../../shared/card-change/card-change.component';\r\nimport { CardChangesFormatterService } from '../../../../services/card-changes-formatter.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { CardChangesList } from '../../../../types/shared/card-changes-list';\r\nimport { selectBoardChangesState } from '../../../../store/board-changes/reducers';\r\nimport { boardChangesActions } from '../../../../store/board-changes/actions';\r\n\r\n@Component({\r\n  selector: 'app-history-sidebar',\r\n  standalone: true,\r\n  imports: [\r\n    ModalComponent,\r\n    CardChangeComponent,\r\n    CommonModule,\r\n    FontAwesomeModule,\r\n  ],\r\n  templateUrl: './history-sidebar.component.html',\r\n})\r\nexport class HistorySidebarComponent {\r\n  private boardId;\r\n\r\n  faXmark = faXmark;\r\n  faArrowRotateLeft = faArrowRotateLeft;\r\n\r\n  changes!: CardChangesList;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private activatedRoute: ActivatedRoute,\r\n    public cardChangesFormatter: CardChangesFormatterService,\r\n  ) {\r\n    this.boardId = Number(\r\n      this.activatedRoute.snapshot.parent?.params['boardId'],\r\n    );\r\n    this.store.dispatch(\r\n      boardChangesActions.loadMore({\r\n        boardId: this.boardId,\r\n        page: 1,\r\n        pageSize: 20,\r\n      }),\r\n    );\r\n    this.store\r\n      .select(selectBoardChangesState)\r\n      .subscribe((changes) => (this.changes = changes));\r\n  }\r\n\r\n  hasMore() {\r\n    return (\r\n      this.changes.totalItems > this.changes.pageNumber * this.changes.pageSize\r\n    );\r\n  }\r\n\r\n  changeTrackBy(index: number, _: CardChange): number {\r\n    return index;\r\n  }\r\n\r\n  getMoreChanges() {\r\n    if (!this.changes) {\r\n      return;\r\n    }\r\n\r\n    this.store.dispatch(\r\n      boardChangesActions.loadMore({\r\n        boardId: this.boardId,\r\n        page: this.changes.pageNumber + 1,\r\n        pageSize: this.changes.pageSize,\r\n      }),\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardChangesFormatter",
                        "type": "CardChangesFormatterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardChangesFormatter",
                        "type": "CardChangesFormatterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<app-modal extraClasses=\"flex justify-end items-center\">\r\n  <aside\r\n    class=\"flex h-screen w-screen max-w-3xl flex-col overflow-y-hidden bg-gray-100 sm:w-[30vw]\"\r\n  >\r\n    <h2\r\n      class=\"flex justify-between bg-gray-500 text-lg font-medium text-white *:p-3 md:text-xl md:*:p-5\"\r\n    >\r\n      <span>History</span>\r\n      <form method=\"dialog\">\r\n        <button>\r\n          <fa-icon [icon]=\"faXmark\"></fa-icon>\r\n        </button>\r\n      </form>\r\n    </h2>\r\n    <div class=\"overflow-y-auto px-5 py-3\" style=\"scrollbar-width: none\">\r\n      <app-card-change\r\n        *ngFor=\"let change of changes.items; trackBy: changeTrackBy\"\r\n        [cardChange]=\"cardChangesFormatter.getFormattedChange(change)\"\r\n      ></app-card-change>\r\n      <button\r\n        *ngIf=\"hasMore()\"\r\n        class=\"my-3 w-full rounded-md border border-gray-900 bg-gray-100 p-1.5 font-medium\"\r\n        (click)=\"getMoreChanges()\"\r\n      >\r\n        <fa-icon [icon]=\"faArrowRotateLeft\"></fa-icon>\r\n        Show more\r\n      </button>\r\n    </div>\r\n  </aside>\r\n</app-modal>\r\n"
        },
        {
            "name": "ListOfCardsComponent",
            "id": "component-ListOfCardsComponent-0a901ae696eb03c3bb368c8c3ba7f8f223a48f5809168b440742bd74966901e1bd56e85d8d3354700f94f2a156963dcb0ed552f38fc72dec75d0bdac55423360",
            "file": "src/app/components/pages/board-page/list-of-cards/list-of-cards.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-of-cards",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./list-of-cards.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "ListWithCards",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editListPopupOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "faEllipsisVertical",
                    "defaultValue": "faEllipsisVertical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "inputControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "cardTrackBy",
                    "args": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "card",
                            "type": "CardInList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "card",
                            "type": "CardInList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CardComponent",
                    "type": "component"
                },
                {
                    "name": "FormButtonComponent",
                    "type": "component"
                },
                {
                    "name": "EditDeleteMenuComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { ListWithCards } from '../../../../types/shared/list-with-cards';\r\nimport { CardComponent } from '../card/card.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { faEllipsisVertical, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { CardInList } from '../../../../types/shared/card-in-list';\r\nimport { EditDeleteMenuComponent } from '../../../shared/edit-delete-menu/edit-delete-menu.component';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { FormButtonComponent } from '../../../shared/form-button/form-button.component';\r\nimport { RouterLink } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { listActions } from '../../../../store/lists/actions';\r\n\r\n@Component({\r\n  selector: 'app-list-of-cards',\r\n  standalone: true,\r\n  imports: [\r\n    CardComponent,\r\n    FormButtonComponent,\r\n    EditDeleteMenuComponent,\r\n    RouterLink,\r\n    CommonModule,\r\n    FontAwesomeModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  templateUrl: './list-of-cards.component.html',\r\n})\r\nexport class ListOfCardsComponent {\r\n  faEllipsisVertical = faEllipsisVertical;\r\n  faPlus = faPlus;\r\n\r\n  @Input() list!: ListWithCards;\r\n  editListPopupOpen = false;\r\n  inputControl = new FormControl('');\r\n\r\n  constructor(private store: Store) {}\r\n\r\n  cardTrackBy(_: number, card: CardInList) {\r\n    return card.id;\r\n  }\r\n\r\n  onEditClick() {\r\n    this.inputControl.setValue(this.list.name);\r\n    this.editListPopupOpen = true;\r\n  }\r\n\r\n  onDeleteClick() {\r\n    this.store.dispatch(listActions.delete({ id: this.list.id }));\r\n  }\r\n\r\n  onSaveClick(): void {\r\n    this.editList();\r\n    this.editListPopupOpen = false;\r\n  }\r\n\r\n  onCancelClick(): void {\r\n    this.editListPopupOpen = false;\r\n  }\r\n\r\n  private editList() {\r\n    this.store.dispatch(\r\n      listActions.update({\r\n        list: {\r\n          id: this.list.id,\r\n          name: this.inputControl.value ?? '',\r\n        },\r\n      }),\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex w-full flex-col gap-3\">\r\n  @if (!editListPopupOpen) {\r\n    <h2\r\n      class=\"relative flex items-center justify-between border-b border-t border-gray-300 py-2 font-medium\"\r\n    >\r\n      <span>{{ list.name }}</span>\r\n      <span>\r\n        {{ list.cards.length }}\r\n        <button class=\"peer\">\r\n          <fa-icon [icon]=\"faEllipsisVertical\" class=\"mx-3\"></fa-icon>\r\n        </button>\r\n        <app-edit-delete-menu\r\n          class=\"absolute right-0 top-8 hidden active:block peer-focus:block\"\r\n          (editClick)=\"onEditClick()\"\r\n          (deleteClick)=\"onDeleteClick()\"\r\n        ></app-edit-delete-menu>\r\n      </span>\r\n    </h2>\r\n    <button\r\n      class=\"rounded-md border border-dashed border-gray-300 p-2 font-medium\"\r\n      routerLink=\"cards/new/{{ list.id }}\"\r\n    >\r\n      <fa-icon [icon]=\"faPlus\" class=\"mr-3\"></fa-icon>\r\n      Add new card\r\n    </button>\r\n  } @else {\r\n    <input\r\n      type=\"text\"\r\n      minlength=\"2\"\r\n      maxlength=\"100\"\r\n      placeholder=\"Enter list title...\"\r\n      class=\"rounded-md border border-gray-400 bg-gray-100 p-2\"\r\n      [formControl]=\"inputControl\"\r\n    />\r\n    <div class=\"flex justify-between gap-2\">\r\n      <app-form-button\r\n        text=\"Save\"\r\n        class=\"grow\"\r\n        [style]=\"'Primary'\"\r\n        (buttonClick)=\"onSaveClick()\"\r\n      >\r\n      </app-form-button>\r\n      <app-form-button\r\n        text=\"Cancel\"\r\n        class=\"grow\"\r\n        [style]=\"'Secondary'\"\r\n        (buttonClick)=\"onCancelClick()\"\r\n      >\r\n      </app-form-button>\r\n    </div>\r\n  }\r\n  <div\r\n    class=\"flex flex-col gap-3 grow overflow-y-auto\"\r\n    style=\"scrollbar-width: none\"\r\n  >\r\n    <app-card\r\n      *ngFor=\"let card of list.cards; trackBy: cardTrackBy\"\r\n      [card]=\"card\"\r\n    ></app-card>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-3a583bf3f9978f425bdaf65d49c62934a517f8be7bedcae028614e7e72a611389288d16641e53af6d6e4b9737c49aa52b47e781754b12eb686365c2af9cc4144",
            "file": "src/app/components/shared/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "extraClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "dialog",
                            "type": "HTMLDialogElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dialog",
                            "type": "HTMLDialogElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDialogClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDialogClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './modal.component.html',\r\n})\r\nexport class ModalComponent {\r\n  @Input() extraClasses = '';\r\n\r\n  constructor(private location: Location) {}\r\n\r\n  onClick(dialog: HTMLDialogElement) {\r\n    dialog.close();\r\n  }\r\n\r\n  onDialogClick(e: MouseEvent) {\r\n    e.stopPropagation();\r\n  }\r\n\r\n  onDialogClosed(): void {\r\n    this.location.back();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\r\n  class=\"absolute left-0 top-0 h-screen w-screen bg-gray-400 bg-opacity-50 {{\r\n    extraClasses\r\n  }}\"\r\n  (click)=\"onClick(modal)\"\r\n>\r\n  <dialog\r\n    open\r\n    (close)=\"onDialogClosed()\"\r\n    (click)=\"onDialogClick($event)\"\r\n    #modal\r\n    class=\"relative m-0 bg-transparent\"\r\n  >\r\n    <ng-content></ng-content>\r\n  </dialog>\r\n</div>\r\n"
        },
        {
            "name": "RedirectToBoardComponent",
            "id": "component-RedirectToBoardComponent-ce3de00b8fb5aaca07f9cfe005933a7b39ad2b500da84a28e99846b81db579de383a5a229f8318c6a14b3240deeafbd79d18881e8b11b0659c23d899b6a5611e",
            "file": "src/app/components/pages/redirect-to-board/redirect-to-board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-redirect-to-board",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectBoardsState } from '../../../store/boards/reducers';\r\n\r\n@Component({\r\n  selector: 'app-redirect-to-board',\r\n  standalone: true,\r\n  imports: [],\r\n  template: '',\r\n})\r\nexport class RedirectToBoardComponent {\r\n  constructor(\r\n    private store: Store,\r\n    private router: Router,\r\n  ) {\r\n    this.store.select(selectBoardsState).subscribe((boards) => {\r\n      if (!boards) {\r\n        return;\r\n      }\r\n\r\n      if (boards.length > 0) {\r\n        this.router.navigate(['/boards', boards[0].id]);\r\n      } else {\r\n        this.router.navigate(['/boards', 'new']);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "TaskBoardComponent",
            "id": "component-TaskBoardComponent-f3aa80b0431b785923830bc59c4f57caec9304223b8d2e63a3655fc7ad7bbda15b12df7c5da1dfccc9ae2a147f05013f74326d87483d9f6c7a63f126da8888fa",
            "file": "src/app/components/pages/board-page/task-board/task-board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-board",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-board.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "board$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<BoardWithLists>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "faArrowRotateLeft",
                    "defaultValue": "faArrowRotateLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "faEllipsisVertical",
                    "defaultValue": "faEllipsisVertical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "listTrackBy",
                    "args": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "type": "ListWithCards",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "ListWithCards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ListOfCardsComponent",
                    "type": "component"
                },
                {
                    "name": "AddNewListComponent",
                    "type": "component"
                },
                {
                    "name": "EditDeleteMenuComponent",
                    "type": "component"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ListWithCards } from '../../../../types/shared/list-with-cards';\r\nimport { ListOfCardsComponent } from '../list-of-cards/list-of-cards.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AddNewListComponent } from '../add-new-list/add-new-list.component';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  faArrowRotateLeft,\r\n  faEllipsisVertical,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { BoardWithLists } from '../../../../types/shared/board-with-lists';\r\nimport {\r\n  ActivatedRoute,\r\n  Router,\r\n  RouterLink,\r\n  RouterOutlet,\r\n} from '@angular/router';\r\nimport { EditDeleteMenuComponent } from '../../../shared/edit-delete-menu/edit-delete-menu.component';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectCurrentBoardState } from '../../../../store/current-board/reducers';\r\nimport { boardActions } from '../../../../store/boards/actions';\r\nimport { currentBoardActions } from '../../../../store/current-board/actions';\r\n\r\n@Component({\r\n  selector: 'app-task-board',\r\n  standalone: true,\r\n  imports: [\r\n    ListOfCardsComponent,\r\n    AddNewListComponent,\r\n    EditDeleteMenuComponent,\r\n    RouterOutlet,\r\n    RouterLink,\r\n    CommonModule,\r\n    FontAwesomeModule,\r\n  ],\r\n  templateUrl: './task-board.component.html',\r\n  host: {\r\n    class: 'flex min-h-0 flex-col',\r\n  },\r\n})\r\nexport class TaskBoardComponent {\r\n  private boardId!: number;\r\n\r\n  faArrowRotateLeft = faArrowRotateLeft;\r\n  faEllipsisVertical = faEllipsisVertical;\r\n\r\n  board$: Observable<BoardWithLists>;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n  ) {\r\n    this.board$ = this.store.select(selectCurrentBoardState);\r\n    this.activatedRoute.params.subscribe((params) => {\r\n      this.boardId = Number(params['boardId']);\r\n      this.store.dispatch(currentBoardActions.load({ id: this.boardId }));\r\n    });\r\n  }\r\n\r\n  listTrackBy(_: number, list: ListWithCards) {\r\n    return list.id;\r\n  }\r\n\r\n  onEditClick() {\r\n    this.router.navigate(['/boards', this.boardId, 'edit']);\r\n  }\r\n\r\n  onDeleteClick() {\r\n    this.store.dispatch(boardActions.delete({ id: this.boardId }));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<ng-container *ngIf=\"board$ | async as board\">\r\n  <hr class=\"mb-3\" />\r\n  <div class=\"flex justify-between pb-3\">\r\n    <h2 class=\"relative text-xl font-bold md:text-3xl\">\r\n      {{ board.name }}\r\n      <button class=\"peer\">\r\n        <fa-icon [icon]=\"faEllipsisVertical\" class=\"mx-3\"></fa-icon>\r\n      </button>\r\n      <app-edit-delete-menu\r\n        class=\"top-15 absolute right-0 z-10 hidden text-sm active:block peer-focus:block md:text-base\"\r\n        (editClick)=\"onEditClick()\"\r\n        (deleteClick)=\"onDeleteClick()\"\r\n      ></app-edit-delete-menu>\r\n    </h2>\r\n    <button\r\n      class=\"h-fit rounded-md border border-gray-300 px-2 py-1 text-sm font-medium md:px-4 md:py-2 md:text-lg\"\r\n      routerLink=\"history\"\r\n    >\r\n      <fa-icon [icon]=\"faArrowRotateLeft\" class=\"mr-1\"></fa-icon>\r\n      History\r\n    </button>\r\n  </div>\r\n  <div class=\"flex min-h-0 justify-start gap-5 overflow-x-auto\">\r\n    <app-list-of-cards\r\n      *ngFor=\"let list of board.lists; trackBy: listTrackBy\"\r\n      [list]=\"list\"\r\n      class=\"flex min-w-64 max-w-md grow basis-1\"\r\n    ></app-list-of-cards>\r\n    <app-add-new-list class=\"min-w-64 max-w-md grow basis-1\"></app-add-new-list>\r\n  </div>\r\n  <router-outlet></router-outlet>\r\n</ng-container>\r\n"
        },
        {
            "name": "ToastNotificationsComponent",
            "id": "component-ToastNotificationsComponent-a8f068562fa098b77c5b47df05188a4dd5f85bf89bf62e66ab0afaa08772173b595121446e372ed262ec90e072764082d7fcdd9aff97f5b321566a47f8de590c",
            "file": "src/app/components/toast-notifications/toast-notifications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toast-notifications",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toast-notifications.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faCircleCheck",
                    "defaultValue": "faCircleCheck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "faCircleXmark",
                    "defaultValue": "faCircleXmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "toastService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastService",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toastTrackBy",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_",
                            "type": "ToastNotification",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_",
                            "type": "ToastNotification",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { ToastService } from '../../services/toast.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport {\r\n  faCircleCheck,\r\n  faCircleXmark,\r\n} from '@fortawesome/free-regular-svg-icons';\r\nimport { ToastNotification } from '../../types/toast/toast-notification';\r\n\r\n@Component({\r\n  selector: 'app-toast-notifications',\r\n  standalone: true,\r\n  imports: [CommonModule, FontAwesomeModule],\r\n  templateUrl: './toast-notifications.component.html',\r\n  animations: [\r\n    trigger('toastTrigger', [\r\n      transition(':enter', [\r\n        style({ transform: 'translateX(100%)' }),\r\n        animate(150),\r\n      ]),\r\n      transition(':leave', [\r\n        animate(150, style({ transform: 'translateX(100%)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class ToastNotificationsComponent {\r\n  faCircleCheck = faCircleCheck;\r\n  faCircleXmark = faCircleXmark;\r\n\r\n  constructor(public toastService: ToastService) {}\r\n\r\n  toastTrackBy(index: number, _: ToastNotification): number {\r\n    return index;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<button\r\n  *ngFor=\"\r\n    let toast of toastService.toasts;\r\n    trackBy: toastTrackBy;\r\n    let i = index\r\n  \"\r\n  @toastTrigger\r\n  (click)=\"toastService.removeToast(i)\"\r\n  class=\"m-1 block rounded-md border-2 border-gray-900 bg-gray-100 p-3\"\r\n>\r\n  <fa-icon\r\n    [icon]=\"toast.type === 'Success' ? faCircleCheck : faCircleXmark\"\r\n    class=\"mr-1 text-lg\"\r\n  ></fa-icon>\r\n  {{ toast.message }}\r\n</button>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "addBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), boardService = inject(BoardService)) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.add),\r\n      switchMap((action) =>\r\n        boardService.addBoard(action.board).pipe(\r\n          map((board) => boardActions.addSuccess({ board })),\r\n          catchError(() => of(boardActions.addFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "name": "addCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), cardService = inject(CardService)) =>\r\n    actions$.pipe(\r\n      ofType(cardActions.add),\r\n      switchMap((action) =>\r\n        cardService.addCard(action.card).pipe(\r\n          map((card) => cardActions.addSuccess({ card })),\r\n\r\n          catchError(() => of(cardActions.addFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "name": "addList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), listService = inject(ListService)) =>\r\n    actions$.pipe(\r\n      ofType(listActions.add),\r\n      switchMap((action) =>\r\n        listService.addList(action.list).pipe(\r\n          map((list) => listActions.addSuccess({ list })),\r\n          catchError(() => of(listActions.addFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "name": "ALLOWED_PRIORITIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/shared/priority.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "['Low', 'Medium', 'High'] as const"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes),\r\n    provideHttpClient(),\r\n    provideAnimations(),\r\n    provideStore(),\r\n    provideState(boardsFeatureKey, boardsReducer),\r\n    provideEffects(\r\n      boardsEffects,\r\n      currentBoardEffects,\r\n      cardEffects,\r\n      listEffects,\r\n      cardChangesEffects,\r\n      boardChangesEffects,\r\n    ),\r\n    provideStoreDevtools({\r\n      maxAge: 25,\r\n      logOnly: !isDevMode(),\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "boardActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n  source: 'Boards',\r\n  events: {\r\n    'Load All': emptyProps(),\r\n    'Load All Success': props<{ boards: Board[] }>(),\r\n    'Load All Failed': emptyProps(),\r\n    Add: props<{ board: CreateBoard }>(),\r\n    'Add Success': props<{ board: Board }>(),\r\n    'Add Failed': emptyProps(),\r\n    Update: props<{ board: UpdateBoard }>(),\r\n    'Update Success': props<{ board: Board }>(),\r\n    'Update Failed': emptyProps(),\r\n    Delete: props<{ id: number }>(),\r\n    'Delete Success': props<{ id: number }>(),\r\n    'Delete Failed': emptyProps(),\r\n  },\r\n})"
            },
            {
                "name": "boardChangesActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board-changes/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n  source: 'Board Changes',\r\n  events: {\r\n    'Load More': props<{ boardId: number, page: number, pageSize: number }>(),\r\n    'Load More Success': props<{ changes: CardChangesList }>(),\r\n    'Load More Failed': emptyProps(),\r\n  },\r\n})"
            },
            {
                "name": "boardChangesFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board-changes/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeature({\r\n  name: 'boardChanges',\r\n  reducer: createReducer(\r\n    initalState,\r\n    on(boardChangesActions.loadMore, (state, { page }) =>\r\n      page === 1 ? initalState : state,\r\n    ),\r\n    on(boardChangesActions.loadMoreSuccess, (state, { changes }) => ({\r\n      ...changes,\r\n      items:\r\n        changes.pageNumber === 1\r\n          ? changes.items\r\n          : [...state.items, ...changes.items],\r\n    })),\r\n  ),\r\n})"
            },
            {
                "name": "boardsFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeature({\r\n  name: 'boards',\r\n  reducer: createReducer(\r\n    initialState,\r\n    on(boardActions.loadAllSuccess, (_, { boards }) => boards),\r\n    on(boardActions.addSuccess, (state, { board }) => [...state, board]),\r\n    on(boardActions.updateSuccess, (state, { board }) =>\r\n      state.map((b) => (b.id == board.id ? board : b)),\r\n    ),\r\n    on(boardActions.deleteSuccess, (state, { id }) =>\r\n      state.filter((b) => b.id !== id),\r\n    ),\r\n  ),\r\n})"
            },
            {
                "name": "cardActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n  source: 'Card',\r\n  events: {\r\n    Load: props<{ id: number }>(),\r\n    'Load Success': props<{ card: Card }>(),\r\n    'Load Failed': emptyProps(),\r\n    Add: props<{ card: CreateCard }>(),\r\n    'Add Success': props<{ card: Card }>(),\r\n    'Add Failed': emptyProps(),\r\n    Update: props<{ card: UpdateCard }>(),\r\n    'Update Success': props<{ card: Card }>(),\r\n    'Update Failed': emptyProps(),\r\n    Delete: props<{ id: number }>(),\r\n    'Delete Success': props<{ id: number }>(),\r\n    'Delete Failed': emptyProps(),\r\n  }\r\n})"
            },
            {
                "name": "cardChangesActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card-changes/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n  source: 'Card Changes',\r\n  events: {\r\n    Load: props<{ cardId: number }>(),\r\n    'Load Success': props<{ changes: CardChange[] }>(),\r\n    'Load Failed': emptyProps(),\r\n  },\r\n})"
            },
            {
                "name": "cardChangesFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card-changes/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeature({\r\n  name: 'cardChanges',\r\n  reducer: createReducer(\r\n    initialState,\r\n    on(cardChangesActions.load, () => null!),\r\n    on(cardChangesActions.loadSuccess, (_, { changes }) => changes),\r\n  ),\r\n})"
            },
            {
                "name": "cardFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeature({\r\n  name: 'card',\r\n  reducer: createReducer(\r\n    initialState,\r\n    on(cardActions.load, () => null!),\r\n    on(cardActions.loadSuccess, (_, { card }) => card),\r\n    on(cardActions.updateSuccess, (_, { card }) => card),\r\n  ),\r\n})"
            },
            {
                "name": "createAddToastEffect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/shared/helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends string>(\r\n  message: string,\r\n  type: ToastNotificationType,\r\n  action: ActionCreator<T>,\r\n) =>\r\n  createEffect(\r\n    (actions$ = inject(Actions), toastService = inject(ToastService)) =>\r\n      actions$.pipe(\r\n        ofType(action),\r\n        tap(() => toastService.addToast(message, type)),\r\n      ),\r\n    { functional: true, dispatch: false },\r\n  )"
            },
            {
                "name": "currentBoardActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/current-board/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n  source: 'Current Board',\r\n  events: {\r\n    Load: props<{ id: number }>(),\r\n    'Load Success': props<{ board: BoardWithLists }>(),\r\n    'Load Failed': emptyProps(),\r\n  }\r\n})"
            },
            {
                "name": "currentBoardFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/current-board/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeature({\r\n  name: 'currentBoard',\r\n  reducer: createReducer(\r\n    initialState,\r\n    on(currentBoardActions.load, () => null!),\r\n    on(currentBoardActions.loadSuccess, (_, { board }) => board),\r\n    on(cardActions.addSuccess, (state, { card }) => ({\r\n      ...state,\r\n      lists: state.lists.map((l) =>\r\n        l.id === card.listId ? updateCardInList(l, card) : l,\r\n      ),\r\n    })),\r\n    on(cardActions.updateSuccess, (state, { card }) => ({\r\n      ...state,\r\n      lists: state.lists.map((l) =>\r\n        l.id === card.listId\r\n          ? updateCardInList(l, card)\r\n          : removeCardFromList(l, card.id),\r\n      ),\r\n    })),\r\n    on(cardActions.deleteSuccess, (state, { id }) => ({\r\n      ...state,\r\n      lists: state.lists.map((l) => removeCardFromList(l, id)),\r\n    })),\r\n    on(listActions.addSuccess, (state, { list }) => ({\r\n      ...state,\r\n      lists: [\r\n        ...state.lists,\r\n        {\r\n          ...list,\r\n          cards: [],\r\n        },\r\n      ],\r\n    })),\r\n    on(listActions.updateSuccess, (state, { list }) => ({\r\n      ...state,\r\n      lists: state.lists.map((l) =>\r\n        l.id === list.id\r\n          ? {\r\n              ...l,\r\n              name: list.name,\r\n            }\r\n          : l,\r\n      ),\r\n    })),\r\n    on(listActions.deleteSuccess, (state, { id }) => ({\r\n      ...state,\r\n      lists: state.lists.filter((l) => l.id !== id),\r\n    })),\r\n  ),\r\n})"
            },
            {
                "name": "deleteBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), boardService = inject(BoardService)) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.delete),\r\n      switchMap((action) =>\r\n        boardService.deleteBoard(action.id).pipe(\r\n          map(() => boardActions.deleteSuccess({ id: action.id })),\r\n          catchError(() => of(boardActions.deleteFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "name": "deleteCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), cardService = inject(CardService)) =>\r\n    actions$.pipe(\r\n      ofType(cardActions.delete),\r\n      switchMap((action) =>\r\n        cardService.deleteCard(action.id).pipe(\r\n          map(() =>\r\n            cardActions.deleteSuccess({\r\n              id: action.id,\r\n            }),\r\n          ),\r\n          catchError(() => of(cardActions.deleteFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "name": "deleteList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), listService = inject(ListService)) =>\r\n    actions$.pipe(\r\n      ofType(listActions.delete),\r\n      switchMap((action) =>\r\n        listService.deleteList(action.id).pipe(\r\n          map(() => listActions.deleteSuccess({ id: action.id })),\r\n          catchError(() => of(listActions.deleteFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  apiBaseUrl: 'http://localhost:5047',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  apiBaseUrl: 'http://localhost:5001',\r\n}"
            },
            {
                "name": "initalState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board-changes/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CardChangesList",
                "defaultValue": "{\r\n  pageNumber: 0,\r\n  pageSize: 20,\r\n  totalItems: 0,\r\n  items: [],\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Board[]",
                "defaultValue": "null!"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Card",
                "defaultValue": "null!"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card-changes/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CardChange[]",
                "defaultValue": "null!"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/current-board/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BoardWithLists",
                "defaultValue": "null!"
            },
            {
                "name": "listActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n  source: 'Lists',\r\n  events: {\r\n    Add: props<{ list: CreateList }>(),\r\n    'Add Success': props<{ list: List }>(),\r\n    'Add Failed': emptyProps(),\r\n    Update: props<{ list: UpdateList }>(),\r\n    'Update Success': props<{ list: List }>(),\r\n    'Update Failed': emptyProps(),\r\n    Delete: props<{ id: number }>(),\r\n    'Delete Success': props<{ id: number }>(),\r\n    'Delete Failed': emptyProps(),\r\n  },\r\n})"
            },
            {
                "name": "loadBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/current-board/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), boardService = inject(BoardService)) =>\r\n    actions$.pipe(\r\n      ofType(currentBoardActions.load),\r\n      switchMap((action) =>\r\n        boardService.getBoardWithLists(action.id).pipe(\r\n          map((board) => {\r\n            return currentBoardActions.loadSuccess({ board });\r\n          }),\r\n          catchError(() => of(currentBoardActions.loadFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "name": "loadBoardChanges",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board-changes/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), historyService = inject(HistoryService)) =>\r\n    actions$.pipe(\r\n      ofType(boardChangesActions.loadMore),\r\n      switchMap((action) =>\r\n        historyService\r\n          .getAllChanges(action.boardId, action.page, action.pageSize)\r\n          .pipe(\r\n            map((changes) => boardChangesActions.loadMoreSuccess({ changes })),\r\n            catchError(() => of(boardChangesActions.loadMoreFailed())),\r\n          ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "name": "loadBoards",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), boardService = inject(BoardService)) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.loadAll),\r\n      switchMap(() =>\r\n        boardService.getAllBoards().pipe(\r\n          map((boards) => boardActions.loadAllSuccess({ boards })),\r\n          catchError(() => of(boardActions.loadAllFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "name": "loadCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), cardService = inject(CardService)) =>\r\n    actions$.pipe(\r\n      ofType(cardActions.load),\r\n      switchMap((action) =>\r\n        cardService.getCardById(action.id).pipe(\r\n          map((card) => cardActions.loadSuccess({ card })),\r\n          catchError(() => of(cardActions.loadFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "name": "loadCardChanges",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card-changes/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), historyService = inject(HistoryService)) =>\r\n    actions$.pipe(\r\n      ofType(cardChangesActions.load),\r\n      switchMap((action) =>\r\n        historyService.getAllChangesForCard(action.cardId).pipe(\r\n          map((changes) => cardChangesActions.loadSuccess({ changes })),\r\n          catchError(() => of(cardChangesActions.loadFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "name": "onAddBoardFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Failed to add the board',\r\n  'Error',\r\n  boardActions.addFailed,\r\n)"
            },
            {
                "name": "onAddBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (\r\n    actions$ = inject(Actions),\r\n    router = inject(Router),\r\n    toastService = inject(ToastService),\r\n  ) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.addSuccess),\r\n      tap(() => toastService.addToast('Board added!', 'Success')),\r\n      tap(({ board }) => router.navigate(['/boards', board.id])),\r\n    ),\r\n  { functional: true, dispatch: false },\r\n)"
            },
            {
                "name": "onAddCardFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Failed to add the card',\r\n  'Error',\r\n  cardActions.addFailed,\r\n)"
            },
            {
                "name": "onAddCardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Card added!',\r\n  'Success',\r\n  cardActions.addSuccess,\r\n)"
            },
            {
                "name": "onAddListFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Failed to add the list',\r\n  'Error',\r\n  listActions.addFailed,\r\n)"
            },
            {
                "name": "onAddListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'List added!',\r\n  'Success',\r\n  listActions.addSuccess,\r\n)"
            },
            {
                "name": "onDeleteBoardFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Failed to delete the board',\r\n  'Error',\r\n  boardActions.deleteFailed,\r\n)"
            },
            {
                "name": "onDeleteBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (\r\n    actions$ = inject(Actions),\r\n    router = inject(Router),\r\n    toastService = inject(ToastService),\r\n  ) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.deleteSuccess),\r\n      tap(() => toastService.addToast('Board deleted!', 'Success')),\r\n      tap(() => router.navigate(['/'])),\r\n    ),\r\n  { functional: true, dispatch: false },\r\n)"
            },
            {
                "name": "onDeleteCardFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Failed to delete the card',\r\n  'Error',\r\n  cardActions.deleteFailed,\r\n)"
            },
            {
                "name": "onDeleteCardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Card deleted!',\r\n  'Success',\r\n  cardActions.deleteSuccess,\r\n)"
            },
            {
                "name": "onDeleteListFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Failed to delete the list',\r\n  'Error',\r\n  listActions.deleteFailed,\r\n)"
            },
            {
                "name": "onDeleteListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'List deleted!',\r\n  'Success',\r\n  listActions.deleteSuccess,\r\n)"
            },
            {
                "name": "onLoadBoardChangesFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board-changes/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  \"Failed to load board's changes\",\r\n  'Error',\r\n  boardChangesActions.loadMoreFailed,\r\n)"
            },
            {
                "name": "onLoadBoardFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/current-board/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Failed to load the board',\r\n  'Error',\r\n  currentBoardActions.loadFailed,\r\n)"
            },
            {
                "name": "onLoadBoardsFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Failed to load the boards',\r\n  'Error',\r\n  boardActions.loadAllFailed,\r\n)"
            },
            {
                "name": "onLoadCardChangesFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card-changes/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  \"Failed to load card's changes\",\r\n  'Error',\r\n  cardChangesActions.loadFailed,\r\n)"
            },
            {
                "name": "onLoadCardFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Failed to load the card',\r\n  'Error',\r\n  cardActions.loadFailed,\r\n)"
            },
            {
                "name": "onUpdateBoardFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Failed to update the board',\r\n  'Error',\r\n  boardActions.updateFailed,\r\n)"
            },
            {
                "name": "onUpdateBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (\r\n    actions$ = inject(Actions),\r\n    router = inject(Router),\r\n    toastService = inject(ToastService),\r\n  ) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.updateSuccess),\r\n      tap(() => toastService.addToast('Board updated!', 'Success')),\r\n      tap(({ board }) => router.navigate(['/boards', board.id])),\r\n    ),\r\n  { functional: true, dispatch: false },\r\n)"
            },
            {
                "name": "onUpdateCardFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Failed to update the card',\r\n  'Error',\r\n  cardActions.updateFailed,\r\n)"
            },
            {
                "name": "onUpdateCardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Card updated!',\r\n  'Success',\r\n  cardActions.updateSuccess,\r\n)"
            },
            {
                "name": "onUpdateCardSuccessLoadChanges",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions)) =>\r\n    actions$.pipe(\r\n      ofType(cardActions.updateSuccess),\r\n      switchMap((action) =>\r\n        of(cardChangesActions.load({ cardId: action.card.id })),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "name": "onUpdateListFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'Failed to update the list',\r\n  'Error',\r\n  listActions.updateFailed,\r\n)"
            },
            {
                "name": "onUpdateListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAddToastEffect(\r\n  'List updated!',\r\n  'Success',\r\n  listActions.updateSuccess,\r\n)"
            },
            {
                "name": "removeCardFromList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/current-board/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  list: ListWithCards,\r\n  cardId: number,\r\n): ListWithCards => {\r\n  return {\r\n    ...list,\r\n    cards: list.cards.filter((c) => c.id !== cardId),\r\n  };\r\n}"
            },
            {
                "name": "selectLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/current-board/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  currentBoardFeature.selectCurrentBoardState,\r\n  (state) => state.lists,\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board-changes/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "boardChangesFeature"
            },
            {
                "name": "updateBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), boardService = inject(BoardService)) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.update),\r\n      switchMap((action) =>\r\n        boardService.updateBoard(action.board).pipe(\r\n          map(() => boardActions.updateSuccess({ board: { ...action.board } })),\r\n\r\n          catchError(() => of(boardActions.updateFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "boardsFeature"
            },
            {
                "name": "updateCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), cardService = inject(CardService)) =>\r\n    actions$.pipe(\r\n      ofType(cardActions.update),\r\n      switchMap((action) =>\r\n        cardService.updateCard(action.card).pipe(\r\n          map(() =>\r\n            cardActions.updateSuccess({\r\n              card: { ...action.card, listName: '' },\r\n            }),\r\n          ),\r\n          catchError(() => of(cardActions.updateFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "cardFeature"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/card-changes/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "cardChangesFeature"
            },
            {
                "name": "updateCardInList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/current-board/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(list: ListWithCards, card: Card): ListWithCards => {\r\n  const cards = [...list.cards];\r\n  const index = list.cards.findIndex((c) => c.id === card.id);\r\n  if (index === -1) {\r\n    cards.push(card);\r\n  } else {\r\n    cards[index] = card;\r\n  }\r\n\r\n  cards.sort(\r\n    (a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime(),\r\n  );\r\n  console.log(cards);\r\n  return {\r\n    ...list,\r\n    cards,\r\n  };\r\n}"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/current-board/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "currentBoardFeature"
            },
            {
                "name": "updateList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), listService = inject(ListService)) =>\r\n    actions$.pipe(\r\n      ofType(listActions.update),\r\n      switchMap((action) =>\r\n        listService.updateList(action.list).pipe(\r\n          map(() => listActions.updateSuccess({ list: { ...action.list } })),\r\n          catchError(() => of(listActions.updateFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "FormattedCardChangeItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "CardCreated | CardDeleted | CardMoved | CardRenamed | CardUpdated",
                "file": "src/app/types/card-changes/formatted-card-change-item.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Priority",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/types/shared/priority.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 199
            },
            {
                "name": "ToastNotificationType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"Success\" | \"Error\"",
                "file": "src/app/types/toast/toast-notification-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/store/boards/effects.ts": [
                {
                    "name": "addBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), boardService = inject(BoardService)) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.add),\r\n      switchMap((action) =>\r\n        boardService.addBoard(action.board).pipe(\r\n          map((board) => boardActions.addSuccess({ board })),\r\n          catchError(() => of(boardActions.addFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                },
                {
                    "name": "deleteBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), boardService = inject(BoardService)) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.delete),\r\n      switchMap((action) =>\r\n        boardService.deleteBoard(action.id).pipe(\r\n          map(() => boardActions.deleteSuccess({ id: action.id })),\r\n          catchError(() => of(boardActions.deleteFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                },
                {
                    "name": "loadBoards",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), boardService = inject(BoardService)) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.loadAll),\r\n      switchMap(() =>\r\n        boardService.getAllBoards().pipe(\r\n          map((boards) => boardActions.loadAllSuccess({ boards })),\r\n          catchError(() => of(boardActions.loadAllFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                },
                {
                    "name": "onAddBoardFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Failed to add the board',\r\n  'Error',\r\n  boardActions.addFailed,\r\n)"
                },
                {
                    "name": "onAddBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (\r\n    actions$ = inject(Actions),\r\n    router = inject(Router),\r\n    toastService = inject(ToastService),\r\n  ) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.addSuccess),\r\n      tap(() => toastService.addToast('Board added!', 'Success')),\r\n      tap(({ board }) => router.navigate(['/boards', board.id])),\r\n    ),\r\n  { functional: true, dispatch: false },\r\n)"
                },
                {
                    "name": "onDeleteBoardFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Failed to delete the board',\r\n  'Error',\r\n  boardActions.deleteFailed,\r\n)"
                },
                {
                    "name": "onDeleteBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (\r\n    actions$ = inject(Actions),\r\n    router = inject(Router),\r\n    toastService = inject(ToastService),\r\n  ) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.deleteSuccess),\r\n      tap(() => toastService.addToast('Board deleted!', 'Success')),\r\n      tap(() => router.navigate(['/'])),\r\n    ),\r\n  { functional: true, dispatch: false },\r\n)"
                },
                {
                    "name": "onLoadBoardsFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Failed to load the boards',\r\n  'Error',\r\n  boardActions.loadAllFailed,\r\n)"
                },
                {
                    "name": "onUpdateBoardFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Failed to update the board',\r\n  'Error',\r\n  boardActions.updateFailed,\r\n)"
                },
                {
                    "name": "onUpdateBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (\r\n    actions$ = inject(Actions),\r\n    router = inject(Router),\r\n    toastService = inject(ToastService),\r\n  ) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.updateSuccess),\r\n      tap(() => toastService.addToast('Board updated!', 'Success')),\r\n      tap(({ board }) => router.navigate(['/boards', board.id])),\r\n    ),\r\n  { functional: true, dispatch: false },\r\n)"
                },
                {
                    "name": "updateBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), boardService = inject(BoardService)) =>\r\n    actions$.pipe(\r\n      ofType(boardActions.update),\r\n      switchMap((action) =>\r\n        boardService.updateBoard(action.board).pipe(\r\n          map(() => boardActions.updateSuccess({ board: { ...action.board } })),\r\n\r\n          catchError(() => of(boardActions.updateFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                }
            ],
            "src/app/store/card/effects.ts": [
                {
                    "name": "addCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), cardService = inject(CardService)) =>\r\n    actions$.pipe(\r\n      ofType(cardActions.add),\r\n      switchMap((action) =>\r\n        cardService.addCard(action.card).pipe(\r\n          map((card) => cardActions.addSuccess({ card })),\r\n\r\n          catchError(() => of(cardActions.addFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                },
                {
                    "name": "deleteCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), cardService = inject(CardService)) =>\r\n    actions$.pipe(\r\n      ofType(cardActions.delete),\r\n      switchMap((action) =>\r\n        cardService.deleteCard(action.id).pipe(\r\n          map(() =>\r\n            cardActions.deleteSuccess({\r\n              id: action.id,\r\n            }),\r\n          ),\r\n          catchError(() => of(cardActions.deleteFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                },
                {
                    "name": "loadCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), cardService = inject(CardService)) =>\r\n    actions$.pipe(\r\n      ofType(cardActions.load),\r\n      switchMap((action) =>\r\n        cardService.getCardById(action.id).pipe(\r\n          map((card) => cardActions.loadSuccess({ card })),\r\n          catchError(() => of(cardActions.loadFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                },
                {
                    "name": "onAddCardFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Failed to add the card',\r\n  'Error',\r\n  cardActions.addFailed,\r\n)"
                },
                {
                    "name": "onAddCardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Card added!',\r\n  'Success',\r\n  cardActions.addSuccess,\r\n)"
                },
                {
                    "name": "onDeleteCardFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Failed to delete the card',\r\n  'Error',\r\n  cardActions.deleteFailed,\r\n)"
                },
                {
                    "name": "onDeleteCardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Card deleted!',\r\n  'Success',\r\n  cardActions.deleteSuccess,\r\n)"
                },
                {
                    "name": "onLoadCardFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Failed to load the card',\r\n  'Error',\r\n  cardActions.loadFailed,\r\n)"
                },
                {
                    "name": "onUpdateCardFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Failed to update the card',\r\n  'Error',\r\n  cardActions.updateFailed,\r\n)"
                },
                {
                    "name": "onUpdateCardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Card updated!',\r\n  'Success',\r\n  cardActions.updateSuccess,\r\n)"
                },
                {
                    "name": "onUpdateCardSuccessLoadChanges",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions)) =>\r\n    actions$.pipe(\r\n      ofType(cardActions.updateSuccess),\r\n      switchMap((action) =>\r\n        of(cardChangesActions.load({ cardId: action.card.id })),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                },
                {
                    "name": "updateCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), cardService = inject(CardService)) =>\r\n    actions$.pipe(\r\n      ofType(cardActions.update),\r\n      switchMap((action) =>\r\n        cardService.updateCard(action.card).pipe(\r\n          map(() =>\r\n            cardActions.updateSuccess({\r\n              card: { ...action.card, listName: '' },\r\n            }),\r\n          ),\r\n          catchError(() => of(cardActions.updateFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                }
            ],
            "src/app/store/lists/effects.ts": [
                {
                    "name": "addList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), listService = inject(ListService)) =>\r\n    actions$.pipe(\r\n      ofType(listActions.add),\r\n      switchMap((action) =>\r\n        listService.addList(action.list).pipe(\r\n          map((list) => listActions.addSuccess({ list })),\r\n          catchError(() => of(listActions.addFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                },
                {
                    "name": "deleteList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), listService = inject(ListService)) =>\r\n    actions$.pipe(\r\n      ofType(listActions.delete),\r\n      switchMap((action) =>\r\n        listService.deleteList(action.id).pipe(\r\n          map(() => listActions.deleteSuccess({ id: action.id })),\r\n          catchError(() => of(listActions.deleteFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                },
                {
                    "name": "onAddListFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Failed to add the list',\r\n  'Error',\r\n  listActions.addFailed,\r\n)"
                },
                {
                    "name": "onAddListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'List added!',\r\n  'Success',\r\n  listActions.addSuccess,\r\n)"
                },
                {
                    "name": "onDeleteListFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Failed to delete the list',\r\n  'Error',\r\n  listActions.deleteFailed,\r\n)"
                },
                {
                    "name": "onDeleteListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'List deleted!',\r\n  'Success',\r\n  listActions.deleteSuccess,\r\n)"
                },
                {
                    "name": "onUpdateListFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Failed to update the list',\r\n  'Error',\r\n  listActions.updateFailed,\r\n)"
                },
                {
                    "name": "onUpdateListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'List updated!',\r\n  'Success',\r\n  listActions.updateSuccess,\r\n)"
                },
                {
                    "name": "updateList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), listService = inject(ListService)) =>\r\n    actions$.pipe(\r\n      ofType(listActions.update),\r\n      switchMap((action) =>\r\n        listService.updateList(action.list).pipe(\r\n          map(() => listActions.updateSuccess({ list: { ...action.list } })),\r\n          catchError(() => of(listActions.updateFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                }
            ],
            "src/app/types/shared/priority.ts": [
                {
                    "name": "ALLOWED_PRIORITIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/shared/priority.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "['Low', 'Medium', 'High'] as const"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes),\r\n    provideHttpClient(),\r\n    provideAnimations(),\r\n    provideStore(),\r\n    provideState(boardsFeatureKey, boardsReducer),\r\n    provideEffects(\r\n      boardsEffects,\r\n      currentBoardEffects,\r\n      cardEffects,\r\n      listEffects,\r\n      cardChangesEffects,\r\n      boardChangesEffects,\r\n    ),\r\n    provideStoreDevtools({\r\n      maxAge: 25,\r\n      logOnly: !isDevMode(),\r\n    }),\r\n  ],\r\n}"
                }
            ],
            "src/app/store/boards/actions.ts": [
                {
                    "name": "boardActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n  source: 'Boards',\r\n  events: {\r\n    'Load All': emptyProps(),\r\n    'Load All Success': props<{ boards: Board[] }>(),\r\n    'Load All Failed': emptyProps(),\r\n    Add: props<{ board: CreateBoard }>(),\r\n    'Add Success': props<{ board: Board }>(),\r\n    'Add Failed': emptyProps(),\r\n    Update: props<{ board: UpdateBoard }>(),\r\n    'Update Success': props<{ board: Board }>(),\r\n    'Update Failed': emptyProps(),\r\n    Delete: props<{ id: number }>(),\r\n    'Delete Success': props<{ id: number }>(),\r\n    'Delete Failed': emptyProps(),\r\n  },\r\n})"
                }
            ],
            "src/app/store/board-changes/actions.ts": [
                {
                    "name": "boardChangesActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board-changes/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n  source: 'Board Changes',\r\n  events: {\r\n    'Load More': props<{ boardId: number, page: number, pageSize: number }>(),\r\n    'Load More Success': props<{ changes: CardChangesList }>(),\r\n    'Load More Failed': emptyProps(),\r\n  },\r\n})"
                }
            ],
            "src/app/store/board-changes/reducers.ts": [
                {
                    "name": "boardChangesFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board-changes/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeature({\r\n  name: 'boardChanges',\r\n  reducer: createReducer(\r\n    initalState,\r\n    on(boardChangesActions.loadMore, (state, { page }) =>\r\n      page === 1 ? initalState : state,\r\n    ),\r\n    on(boardChangesActions.loadMoreSuccess, (state, { changes }) => ({\r\n      ...changes,\r\n      items:\r\n        changes.pageNumber === 1\r\n          ? changes.items\r\n          : [...state.items, ...changes.items],\r\n    })),\r\n  ),\r\n})"
                },
                {
                    "name": "initalState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board-changes/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardChangesList",
                    "defaultValue": "{\r\n  pageNumber: 0,\r\n  pageSize: 20,\r\n  totalItems: 0,\r\n  items: [],\r\n}"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board-changes/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "boardChangesFeature"
                }
            ],
            "src/app/store/boards/reducers.ts": [
                {
                    "name": "boardsFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeature({\r\n  name: 'boards',\r\n  reducer: createReducer(\r\n    initialState,\r\n    on(boardActions.loadAllSuccess, (_, { boards }) => boards),\r\n    on(boardActions.addSuccess, (state, { board }) => [...state, board]),\r\n    on(boardActions.updateSuccess, (state, { board }) =>\r\n      state.map((b) => (b.id == board.id ? board : b)),\r\n    ),\r\n    on(boardActions.deleteSuccess, (state, { id }) =>\r\n      state.filter((b) => b.id !== id),\r\n    ),\r\n  ),\r\n})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board[]",
                    "defaultValue": "null!"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "boardsFeature"
                }
            ],
            "src/app/store/card/actions.ts": [
                {
                    "name": "cardActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n  source: 'Card',\r\n  events: {\r\n    Load: props<{ id: number }>(),\r\n    'Load Success': props<{ card: Card }>(),\r\n    'Load Failed': emptyProps(),\r\n    Add: props<{ card: CreateCard }>(),\r\n    'Add Success': props<{ card: Card }>(),\r\n    'Add Failed': emptyProps(),\r\n    Update: props<{ card: UpdateCard }>(),\r\n    'Update Success': props<{ card: Card }>(),\r\n    'Update Failed': emptyProps(),\r\n    Delete: props<{ id: number }>(),\r\n    'Delete Success': props<{ id: number }>(),\r\n    'Delete Failed': emptyProps(),\r\n  }\r\n})"
                }
            ],
            "src/app/store/card-changes/actions.ts": [
                {
                    "name": "cardChangesActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card-changes/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n  source: 'Card Changes',\r\n  events: {\r\n    Load: props<{ cardId: number }>(),\r\n    'Load Success': props<{ changes: CardChange[] }>(),\r\n    'Load Failed': emptyProps(),\r\n  },\r\n})"
                }
            ],
            "src/app/store/card-changes/reducers.ts": [
                {
                    "name": "cardChangesFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card-changes/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeature({\r\n  name: 'cardChanges',\r\n  reducer: createReducer(\r\n    initialState,\r\n    on(cardChangesActions.load, () => null!),\r\n    on(cardChangesActions.loadSuccess, (_, { changes }) => changes),\r\n  ),\r\n})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card-changes/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardChange[]",
                    "defaultValue": "null!"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card-changes/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "cardChangesFeature"
                }
            ],
            "src/app/store/card/reducers.ts": [
                {
                    "name": "cardFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeature({\r\n  name: 'card',\r\n  reducer: createReducer(\r\n    initialState,\r\n    on(cardActions.load, () => null!),\r\n    on(cardActions.loadSuccess, (_, { card }) => card),\r\n    on(cardActions.updateSuccess, (_, { card }) => card),\r\n  ),\r\n})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "defaultValue": "null!"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "cardFeature"
                }
            ],
            "src/app/store/shared/helpers.ts": [
                {
                    "name": "createAddToastEffect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/shared/helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends string>(\r\n  message: string,\r\n  type: ToastNotificationType,\r\n  action: ActionCreator<T>,\r\n) =>\r\n  createEffect(\r\n    (actions$ = inject(Actions), toastService = inject(ToastService)) =>\r\n      actions$.pipe(\r\n        ofType(action),\r\n        tap(() => toastService.addToast(message, type)),\r\n      ),\r\n    { functional: true, dispatch: false },\r\n  )"
                }
            ],
            "src/app/store/current-board/actions.ts": [
                {
                    "name": "currentBoardActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/current-board/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n  source: 'Current Board',\r\n  events: {\r\n    Load: props<{ id: number }>(),\r\n    'Load Success': props<{ board: BoardWithLists }>(),\r\n    'Load Failed': emptyProps(),\r\n  }\r\n})"
                }
            ],
            "src/app/store/current-board/reducers.ts": [
                {
                    "name": "currentBoardFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/current-board/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeature({\r\n  name: 'currentBoard',\r\n  reducer: createReducer(\r\n    initialState,\r\n    on(currentBoardActions.load, () => null!),\r\n    on(currentBoardActions.loadSuccess, (_, { board }) => board),\r\n    on(cardActions.addSuccess, (state, { card }) => ({\r\n      ...state,\r\n      lists: state.lists.map((l) =>\r\n        l.id === card.listId ? updateCardInList(l, card) : l,\r\n      ),\r\n    })),\r\n    on(cardActions.updateSuccess, (state, { card }) => ({\r\n      ...state,\r\n      lists: state.lists.map((l) =>\r\n        l.id === card.listId\r\n          ? updateCardInList(l, card)\r\n          : removeCardFromList(l, card.id),\r\n      ),\r\n    })),\r\n    on(cardActions.deleteSuccess, (state, { id }) => ({\r\n      ...state,\r\n      lists: state.lists.map((l) => removeCardFromList(l, id)),\r\n    })),\r\n    on(listActions.addSuccess, (state, { list }) => ({\r\n      ...state,\r\n      lists: [\r\n        ...state.lists,\r\n        {\r\n          ...list,\r\n          cards: [],\r\n        },\r\n      ],\r\n    })),\r\n    on(listActions.updateSuccess, (state, { list }) => ({\r\n      ...state,\r\n      lists: state.lists.map((l) =>\r\n        l.id === list.id\r\n          ? {\r\n              ...l,\r\n              name: list.name,\r\n            }\r\n          : l,\r\n      ),\r\n    })),\r\n    on(listActions.deleteSuccess, (state, { id }) => ({\r\n      ...state,\r\n      lists: state.lists.filter((l) => l.id !== id),\r\n    })),\r\n  ),\r\n})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/current-board/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardWithLists",
                    "defaultValue": "null!"
                },
                {
                    "name": "removeCardFromList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/current-board/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  list: ListWithCards,\r\n  cardId: number,\r\n): ListWithCards => {\r\n  return {\r\n    ...list,\r\n    cards: list.cards.filter((c) => c.id !== cardId),\r\n  };\r\n}"
                },
                {
                    "name": "selectLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/current-board/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  currentBoardFeature.selectCurrentBoardState,\r\n  (state) => state.lists,\r\n)"
                },
                {
                    "name": "updateCardInList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/current-board/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(list: ListWithCards, card: Card): ListWithCards => {\r\n  const cards = [...list.cards];\r\n  const index = list.cards.findIndex((c) => c.id === card.id);\r\n  if (index === -1) {\r\n    cards.push(card);\r\n  } else {\r\n    cards[index] = card;\r\n  }\r\n\r\n  cards.sort(\r\n    (a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime(),\r\n  );\r\n  console.log(cards);\r\n  return {\r\n    ...list,\r\n    cards,\r\n  };\r\n}"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/current-board/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "currentBoardFeature"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  apiBaseUrl: 'http://localhost:5047',\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  apiBaseUrl: 'http://localhost:5001',\r\n}"
                }
            ],
            "src/app/store/lists/actions.ts": [
                {
                    "name": "listActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n  source: 'Lists',\r\n  events: {\r\n    Add: props<{ list: CreateList }>(),\r\n    'Add Success': props<{ list: List }>(),\r\n    'Add Failed': emptyProps(),\r\n    Update: props<{ list: UpdateList }>(),\r\n    'Update Success': props<{ list: List }>(),\r\n    'Update Failed': emptyProps(),\r\n    Delete: props<{ id: number }>(),\r\n    'Delete Success': props<{ id: number }>(),\r\n    'Delete Failed': emptyProps(),\r\n  },\r\n})"
                }
            ],
            "src/app/store/current-board/effects.ts": [
                {
                    "name": "loadBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/current-board/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), boardService = inject(BoardService)) =>\r\n    actions$.pipe(\r\n      ofType(currentBoardActions.load),\r\n      switchMap((action) =>\r\n        boardService.getBoardWithLists(action.id).pipe(\r\n          map((board) => {\r\n            return currentBoardActions.loadSuccess({ board });\r\n          }),\r\n          catchError(() => of(currentBoardActions.loadFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                },
                {
                    "name": "onLoadBoardFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/current-board/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  'Failed to load the board',\r\n  'Error',\r\n  currentBoardActions.loadFailed,\r\n)"
                }
            ],
            "src/app/store/board-changes/effects.ts": [
                {
                    "name": "loadBoardChanges",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board-changes/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), historyService = inject(HistoryService)) =>\r\n    actions$.pipe(\r\n      ofType(boardChangesActions.loadMore),\r\n      switchMap((action) =>\r\n        historyService\r\n          .getAllChanges(action.boardId, action.page, action.pageSize)\r\n          .pipe(\r\n            map((changes) => boardChangesActions.loadMoreSuccess({ changes })),\r\n            catchError(() => of(boardChangesActions.loadMoreFailed())),\r\n          ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                },
                {
                    "name": "onLoadBoardChangesFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board-changes/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  \"Failed to load board's changes\",\r\n  'Error',\r\n  boardChangesActions.loadMoreFailed,\r\n)"
                }
            ],
            "src/app/store/card-changes/effects.ts": [
                {
                    "name": "loadCardChanges",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card-changes/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEffect(\r\n  (actions$ = inject(Actions), historyService = inject(HistoryService)) =>\r\n    actions$.pipe(\r\n      ofType(cardChangesActions.load),\r\n      switchMap((action) =>\r\n        historyService.getAllChangesForCard(action.cardId).pipe(\r\n          map((changes) => cardChangesActions.loadSuccess({ changes })),\r\n          catchError(() => of(cardChangesActions.loadFailed())),\r\n        ),\r\n      ),\r\n    ),\r\n  { functional: true },\r\n)"
                },
                {
                    "name": "onLoadCardChangesFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/card-changes/effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAddToastEffect(\r\n  \"Failed to load card's changes\",\r\n  'Error',\r\n  cardChangesActions.loadFailed,\r\n)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/types/card-changes/formatted-card-change-item.ts": [
                {
                    "name": "FormattedCardChangeItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "CardCreated | CardDeleted | CardMoved | CardRenamed | CardUpdated",
                    "file": "src/app/types/card-changes/formatted-card-change-item.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/types/shared/priority.ts": [
                {
                    "name": "Priority",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/types/shared/priority.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 199
                }
            ],
            "src/app/types/toast/toast-notification-type.ts": [
                {
                    "name": "ToastNotificationType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"Success\" | \"Error\"",
                    "file": "src/app/types/toast/toast-notification-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/add-edit-board/add-edit-board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddEditBoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/board-page/add-edit-card/add-edit-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddEditCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/board-page/add-new-list/add-new-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddNewListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/board-page/card-details/card-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/board-page/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/board-page/history-sidebar/history-sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HistorySidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/board-page/list-of-cards/list-of-cards.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListOfCardsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/board-page/task-board/task-board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskBoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/redirect-to-board/redirect-to-board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RedirectToBoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shared/card-change/card-change.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardChangeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shared/card-change/card-name/card-name.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardNameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shared/edit-delete-menu/edit-delete-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditDeleteMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shared/form-button/form-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shared/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toast-notifications/toast-notifications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastNotificationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/ellipsis.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "EllipsisPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/board.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/card-changes-formatter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardChangesFormatterService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/card.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/history.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HistoryService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ListService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board-changes/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "boardChangesActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board-changes/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBoardChanges",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board-changes/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onLoadBoardChangesFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board-changes/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "boardChangesFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board-changes/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initalState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board-changes/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "boardActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBoards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onAddBoardFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onAddBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onDeleteBoardFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onDeleteBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onLoadBoardsFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onUpdateBoardFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onUpdateBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "boardsFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card-changes/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cardChangesActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card-changes/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCardChanges",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card-changes/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onLoadCardChangesFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card-changes/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cardChangesFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card-changes/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card-changes/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cardActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onAddCardFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onAddCardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onDeleteCardFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onDeleteCardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onLoadCardFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onUpdateCardFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onUpdateCardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onUpdateCardSuccessLoadChanges",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cardFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/card/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/current-board/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "currentBoardActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/current-board/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/current-board/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onLoadBoardFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/current-board/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "currentBoardFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/current-board/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/current-board/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeCardFromList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/current-board/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/current-board/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateCardInList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/current-board/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "listActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onAddListFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onAddListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onDeleteListFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onDeleteListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onUpdateListFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onUpdateListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/shared/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createAddToastEffect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/card-changes/card-created.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardCreated",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/card-changes/card-deleted.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardDeleted",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/card-changes/card-moved.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardMoved",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/types/card-changes/card-renamed.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardRenamed",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/card-changes/card-updated.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardUpdated",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/types/card-changes/formatted-card-change.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormattedCardChange",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/requests/create-board.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateBoard",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/types/requests/create-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateCard",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/types/requests/create-list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/requests/update-board.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateBoard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/requests/update-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateCard",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/types/requests/update-list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/shared/board-with-lists.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoardWithLists",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/shared/board.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Board",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/shared/card-change.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardChange",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/types/shared/card-changes-list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardChangesList",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/types/shared/card-in-list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardInList",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/types/shared/card-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/types/shared/card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Card",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/types/shared/list-with-cards.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListWithCards",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/shared/list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "List",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/shared/priority.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALLOWED_PRIORITIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/toast/toast-notification.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ToastNotification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}